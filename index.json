[{"categories":["科研"],"content":"论文调研：《Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing》 ","date":"2023-12-10","objectID":"/posts/digfuzz/:0:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"背景知识 参考文章 阅读笔记：《The Art, Science, and Engineering of Fuzzing: A Survey》 Hybrid Fuzzing Paper Summary ","date":"2023-12-10","objectID":"/posts/digfuzz/:1:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"fuzzing 的分类 根据 fuzzer 观察到的语义粒度，fuzzer 被分为黑盒 fuzzer、灰盒 fuzzer 和白盒 fuzzer。 根据 PUT 输入可分为 file, network, UI, web, kernel I/O, or threads fuzzer 黑盒（black-box）fuzzer 仅考虑输入、输出信息作为 fuzzer 的 knowledgement IO-driven or data-driven modern fuzzers：the structural informa about inputs 白盒（white-box）fuzzer 分析 PUT 内部结构以及 PUT 执行所产生的信息，系统探索 PUT 状态空间 DSE 动态符号执行（dynamic symbolic execution，concolic testing，symbolic execution+concrete execution），简化符号执行的约束条件 污点分析（taint analysis） 开销较大（higher overhead）：动态执行+SMT solving 灰盒（grey-box）fuzzer 部分 PUT 内部结构信息以及 PUT 执行所产生的信息 不考虑完整的语义信息 lightweight static analysis or dynamic information about execution（e.g. code coverage） approximated, imperfect information 加快速度和产生更多的测试用例 Dynamic Symbolic Execution 经典的符号执行是指使用符号化的值作为输入运行一个程序，这些符号化的变量代表所有可能的值。当符号执行器执行 PUT 时，它会建立一个符号表达式而不是计算实际的变量。当它遇到一个条件分支指令的时候，它会分为两个 symbolic interpreter，一个代表正确分支一个代表错误分支。对每一条路径，symbolic interpreter 会为执行过程中遇到的每一条分支指令建立一个路径公式（路径断言）。如果存在一个实际的输入，能够执行目标路径，那么就说该路径公式是可满足的。可以通过求解 SMT solver 来生成一个适用于路径公式的实际输入。动态符号执行是传统的符号执行的变体，在动态符号执行过程中，符号执行和实际的执行会同时进行。因此，动态符号执行通常被称为 concolic（concrete+symbolic）测试。结合动态执行的优点是实际的执行可以减小符号约束的复杂度。 相比较于灰盒或者黑盒方法而言，动态符号执行是很慢的，这是由于它需要分析 PUT 的每一条指令并插桩。为了解决开销过大的问题，一种缩小动态符号执行范畴的通用策略被提出：让用户确定代码中不感兴趣的部分或者感兴趣的片段、交替使用 conclic testing 和灰盒 fuzzing。 DigFuzz DigFuzz: 用灰盒测试确定每个分支执行概率，再使用白盒 fuzzer 对对于灰盒 fuzzing 比较 challenging 的路径进行 fuzzing。 DigFuzz 提出基于蒙特卡洛的路径概率排序模型 (Monte Carlo Based Probabilistic Path Prioritization Model, $MCP^3$)，在 fuzzing 的过程中，用 seed 的 trace 构建执行路径树，用覆盖率计算每个分支的概率，路径的概率为路径上分支的概率相乘，最后基于路径的概率对路径进行排序，概率越小代表路径越难探索，将最难探索的路径优先给 concolic execution 进行探索。 Probabilistic Path Prioritization for Hybrid Fuzzing 主要翻译参考自 DigFuzz。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:1:1","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"Abstract 混合模糊测试结合了模糊测试和符号执行，是一种先进的软件漏洞检测技术。基于对模糊和符号执行本质上是互补的观察，最先进的混合模糊测试系统部署了需求启动 demand launch和最佳切换 optimal switch策略。虽然这些想法听起来很有意思，但由于过于简单的假设，我们指出了它们中的几个基本限制。 然后，我们提出了一种新颖的判别式调度 discriminative dispatch策略，以更好地利用符号执行的能力。我们设计了一种新的基于Monte Carlo的概率路径优先级模型，用于量化每条路径的难度，并优先考虑它们的符号执行。此模型将模糊测试视为随机抽样过程，根据采样信息计算每个路径的概率。最后，我们的模型优先考虑并指定最困难的路径来符号执行。 我们实现了原型系统DigFuzz，并使用两个有代表性的数据集评估我们的系统。结果表明，在各个主要方面，DigFuzz中的符号执行性能优于最先进的混合模糊测试系统。特别是，DigFuzz中的符号执行有助于发现更多的漏洞（12对5），并在CQE数据集上产生比在Driller中执行的更多代码覆盖（18.9％对3.8％）。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:2:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"1.Introduction 软件漏洞被认为是对网络空间最严重的威胁之一。因此，发现一个软件中的漏洞至关重要[12]，[16]，[25]，[27]，[32]。最近，模糊测试和符号执行的组合——混合模糊测试，在漏洞发现中变得越来越流行[5]，[29]，[31]，[39]，[42]，[46]。 由于模糊测试和符号执行本质上是互补的，因此将它们结合起来可以潜在地利用它们的独特优势并减轻弱点。更具体地说，模糊测试（Fuzzing）擅长探索包含一般分支（具有大的满足值空间的分支，比如 x\u003e100）的路径，但是不能探索包含特定分支的路径（具有非常窄的满足值空间的分支,比如 x=2）[27]。相反，符号执行能够生成具体的输入，确保程序沿着特定的执行路径执行，但它会遇到路径爆炸问题[9]。 在混合方案中，模糊测试由于高吞吐量通常承担路径探索的大多数任务，而符号执行辅助模糊测试探索低概率的路径、并且生成满足特定分支的输入。通过这种方式，可以减轻分支符号执行中的路径爆炸问题，因为符号执行仅负责探索可能阻止模糊测试的低概率路径。 关键的研究问题是如何结合模糊测试和符号执行以实现最佳的整体性能。Driller[39]和hybrid concolic testing[29]采取需求启动策略：模糊测试首先开始，并且只有当模糊测试在一段时间内无法取得任何进展（即卡住stuck）时才会启动符号执行。最近的一项工作[42]提出了一种最佳切换 optimal switch策略：它通过模糊测试和符号执行来量化探索每条路径的成本，并选择更经济的方法来探索这条路径。 我们使用DARPA CQE数据集[13]和LAVA-m数据集[15]评估了需求启动和最佳切换策略，并发现尽管这些策略听起来很有趣，但由于不太现实或过度简化的假设，它们都没有充分发挥作用。 对于需求启动 demand launch策略： 模糊器(Fuzzer)的卡住状态不是良好的启动符号执行指标 模糊测试正在取得进展，并不一定意味着不需要进行符号执行。模糊器仍然可以探索新代码，即使它已经被许多特定分支阻塞，而因为模糊器未处于卡住状态，因此符号执行器被迫空闲。 该策略无法识别阻止模糊测试的特定路径 一旦模糊器卡住，需求启动 demand launch策略就会将模糊器保留的所有种子提供给符号执行，用于探索所有错过路径。然后，这种大量错过的路径会让执符号执行不堪重负，并且可能会在很长一段时间后为特定路径生成有效的输入。到那时，模糊器可能已经生成了一个良好的输入来遍历该特定路径，从而使整个符号执行变得毫无用处。 同样，尽管最佳切换 optimal switch策略旨在基于可靠的数学模型（即，具有成本的马尔可夫决策过程，简称MDPC）做出最优决策，但是量化每条路径的模糊测试和符号执行的成本是非常重要的。例如，为了量化特定路径的独立执行成本，MDPC需要收集已经很昂贵的路径约束。结果，MDPC的总吞吐量大大降低。此外，在量化模糊测试的成本时，MDPC假设所有测试用例均匀分布。这种假设过于简单，因为许多最先进的模糊测试技术[4]，[12]，[16]是自适应和进化的。最后，即使可以准确地估计模糊测试和符号执行的成本，但要将它们标准化以进行统一比较是具有挑战性的，因为这两种成本是通过具有不同度量的技术来估计的。 基于这些观察，我们在构建混合模糊测试系统时争论以下设计原则： 由于符号执行比模糊测试慢几个数量级，我们应该只让它解决最难的问题，并让模糊测试采取路径探索的多数任务 由于高吞吐量对于模糊测试至关重要，因此任何额外的分析都必须是轻量级的，以避免对模糊测试的性能产生不利影响。 在本文中，我们提出了一种判别式调度 discriminative dispatch策略，以更好地结合模糊测试和符号执行： 优先考虑路径，更好地利用符号执行的能力：以便符号执行仅用于模糊测试最难以突破的选择性路径 这种判别式调度策略的关键是量化每条路径的难度级别的轻量级方法。先前的工作通过执行昂贵的符号执行来解决这个问题[18]，因此不适合我们的目的。 特别地，我们提出了一种新的基于蒙特卡罗的概率路径优先级（$MCP^3$）模型，以有效的方式量化每个路径的难度。通过随机输入$\\Rightarrow$遍历该路径的概率$\\Rightarrow$量化路径的难度。我们使用蒙特卡罗方法[35]计算这个概率。核心思想是将模糊测试视为随机抽样过程，将随机执行视为整个程序空间的样本，然后根据抽样信息计算每个路径的概率。 我们已经实现了一个名为DigFuzz的原型系统。它利用流行的模糊器，American Fuzzy Lop(AFL)[47]作为模糊组件，并在开源符号执行引擎Angr之上构建了一个符号执行器[38]。我们使用来自ARPA Cyber Grand Challenge [13]和LAVA数据集[15]的CQE评估来评估DigFuzz的有效性。评估结果表明，与最先进的混合系统相比，DigFuzz中的复杂执行对代码覆盖率的增加和发现的漏洞数量的增加做出了更大的贡献。更具体地说，DigFuzz中的执行执行有助于发现更多的漏洞（12对5），并在CQE数据集上产生更多的代码覆盖率（18.9％对3.8％），而不是在Driller [39]中执行。 论文贡献概述如下： 我们对两种最先进的混合模糊测试策略（需求启动和最佳切换）进行独立评估，并发现以前未报告过的几个重要限制。 我们提出了一种新颖的判别式调度策略，作为构建混合模糊测试系统的更好方法。它遵循两个设计原则：1）让模糊测试进行路径探索的大多数任务，并且只分配最困难的路径进行符号执行; 2）路径困难的量化必须是轻量级的。为了实现这两个原则，我们设计了一个基于蒙特卡罗的概率路径优先模型。 我们实施原型系统DigFuzz，并使用DARPA CQE数据集和LAVA数据集评估其有效性。我们的实验表明DigFuzz在更多发现的漏洞和更高的代码覆盖率方面优于最先进的混合系统Driller和MDPC。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:3:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"2.Background And Motivation Fuzzing [30]和concoic execution [9]是软件测试和漏洞检测的两种代表性技术。 由于观察到模糊和执行的执行在本质上可以相互补充，已经提出了一系列技术[5]，[29]，[31]，[39]，[42]将它们组合在一起并创建混合模糊系统。通常，这些混合模糊测试系统分为两类：“需求启动”和“最佳切换”。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:4:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"A.Demand Launch 最先进的混合方案，如Driller [39]和混合动力系统测试[29]部署了“需求启动”战略。在Driller [39]中，由于模糊器在一段时间内无法取得任何进展，因此该模板执行器仍处于空闲状态。然后，它依次处理来自模糊器的所有保留输入，以生成可能有助于模糊器的输入，并进一步导致新的代码覆盖。类似地，混合分析测试[29]通过混合测试获得了对程序状态空间的深入和广泛的探索。它通过利用随机测试的能力快速到达程序状态，然后通过执行执行彻底探索邻居状态。 在一个问题上，必须有两个假设才能使“需求启动”战略按预期发挥作用： 非卡住状态的模糊器意味着不需要执行。只有当模糊器卡住时，混合系统才应该开始执行。 卡住状态表明模糊器在可接受的时间内无法在发现新的代码覆盖范围方面取得任何进展。此外，具有执行力的执行能够找到并解决阻塞模糊器的难以解决的条件检查，以便模糊测试可以继续发现新的覆盖范围。 观察 为了评估需求启动战略的表现，我们仔细研究了 Driller 如何在 DARPA Cyber Grand Challenge（CGC）的12个小时中工作12小时，并找到五个有趣且令人惊讶的事实。 调用 concolic 执行的百分比较低。Driller 仅在118个二进制文件中的49个中调用了 concoic 执行，这意味着模糊器只会卡在这49个二进制文件上。这一事实与 Driller [40]的论文中报道的数字（42）相当。 卡住的时间段较少。对于事实1中的49个二进制文件，我们统计计算卡住时间段，卡住时间段的分布如图1所示。我们可以观察到超过85％的卡住时间段低于100秒。 图1. 停滞状态持续时间的累积分布 巨大的吞吐量差距。表1 中的执行时间表明，模糊测试的吞吐量比 concolic 执行的吞吐量高出几个数量级。因此，一个实际的设计应该只选择很少的输入来执行，而不是“需求启动”策略，后者将模糊测试保留的所有输入都提供给 concolic 执行器。平均而言，为一个具体的输入完成动态符号执行需要1654秒。 表1 执行时间比较 实用性低。由于存在如此巨大的吞吐量差距，在实践中，对于“需求启动”策略，符号执行对模糊测试的帮助很有限。图2显示了对 CQE 二进制文件进行符号执行（angr）处理的输入数量和模糊测试器保留的输入数量（23915个中的1709个）。对于12个实际程序，表2显示 QSYM 处理了795个输入，而模糊测试器保留的输入总数为15269个。平均而言，在12小时的测试中，只有模糊测试器保留的输入中的6.3%被符号执行器处理。 图2. 模糊器保留的输入数和 concolic 执行处理的输入数。 表2 输入由 Fuzzer 保留并由 QSYM 处理 对代码覆盖率的贡献很小。在 12 小时的测试结束时，“需求启动”策略在 49 个 CQE 二进制文件上调用了 concolic 执行，并完成了 1709 次运行。更详细的调查显示，总共只有 51 个由 concolic 执行生成的输入是通过模糊测试导入的，并且 concolic 执行只能通过生成至少一个导致新代码覆盖率的输入来帮助对 13 个二进制文件进行模糊测试。 局限性 上述结果表明需求启动策略的两个主要局限。 首先，模糊器的卡住状态不是判断是否需要执行模板的好指标。根据事实1，模糊器仅停留在49个二进制文件上，这意味着其他77个二进制文件永远不会启动模仿执行。对这77个二进制文件的源代码进行手动调查表明，它们都包含可以阻止模糊测试的特定分支。进一步结合事实2，我们可以看到处于卡住状态的模糊器并不一定意味着它实际上需要执行，因为大多数卡住状态非常短（85％的卡住状态不到100秒）。这些事实打破了上述假设1。 其次，“需求启动”策略无法识别阻止模糊测试的特定路径，从而导致非常低效的执行。一方面，平均执行平均需要1654秒来处理一个输入（事实3）。另一方面，模糊器通常比常规执行可以保留更多的输入（事实4）。结果，对应于阻止模糊测试的特定分支的输入（即，可能导致执行到目标位置的输入）仅具有非常小的机会被通过结构执行来拾取和处理。因此，上述假设2在实践中并不真正成立。事实5可以进一步证实这一结论，尽管它是在49个二进制文件上发布的，但是对于仅仅13个二进制文件的执行可以帮助模糊测试。此外，在1709次符号执行之后，模糊执行器仅导入了51个来自符号执行的输入，表明由符号执行而产生的输入质量非常低。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:4:1","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"B.Optimal Switch “最佳切换”策略旨在基于数学模型（即，具有成本的马尔可夫决策过程，简称MDPC）对使用哪种方法来探索给定的执行路径做出最佳决策。为了获得最佳性能，MDPC 始终选择成本较低的方法来探索每条路径。为了使这一战略运作良好，必须遵循以下假设： 可以准确地估计通过模糊和经验执行来探索路径的成本 成本估算的开销可以忽略不计 用于做出最优决策的算法是轻量级的 观察 为了评估最佳切换的性能，我们评估了 MDPC 如何在 CQE 数据集中对118个二进制文件工作12小时，并有3个有趣的观察结果。 Heavyweight Estimation。表1 显示了模糊测试、MDPC、符号执行（angr、QSYM）中的最佳决策之间的吞吐量差距。可以观察到使用 MDPC 计算概率的成本很高，是模糊测试的大几千倍。 表1 执行时间比较 吞吐量降低。由于 MDPC 在探索每条路径之前做出最佳决策，因此整体分析吞吐量显着降低，从纯模糊测试中每秒执行417次到 MDPC 中每秒执行2.6次。由于吞吐量减少的负面影响，下图显示了由 AFL 维护的位图大小，这是代码覆盖的近似。可以观察到，optimal concolic testing发现的代码覆盖较少，而不如纯模糊测试。 估计不准确。由于吞吐量降低的影响，MDPC 仅在29个二进制文件中发现漏洞，而纯模糊测试可以发现67个二进制文件中的漏洞。 Fuzing和MDPC的代码覆盖率比较 由于 MDPC 在探索每条路径之前做出了最佳决策，昂贵的最优决策都会带走模糊测量的高吞吐量。作为优化，使模糊测试和最优决策工作并行进行，而不是像在原始系统中那样按顺序运行，并构建并发 MDPC。使用相同的数据集对其进行评估，并得出以下观察结果，我们有另一个观察。 在模糊测试开始后的几秒钟内，几乎所有遗漏的路径都决定通过 concolic 执行进行探索。通过检查覆盖率统计，我们观察到模糊器能够在几秒钟内生成数百个测试用例，这导致基于 MDPC 算法的 Fuzzing 搜索遗漏路径的代价很高。相反，即使我们为每个路径约束分配最高的求解成本(如定义[42]所示的50)，也可以降低执行成本。 限制 上述观察结果表明，最佳切换策略的关键限制是估计通过模糊测试和符号执行来探索路径的成本是重量级且不准确的，这掩盖了制定最优解决方案的好处。 首先，估计 concolic 执行的成本依赖于收集路径约束并确定这些约束的解决成本。由于收集路径约束需要将程序语句转换为符号表达式，因此这种解释也是重量级的，特别是对于具有长路径的程序。此外，MDPC 设计了一种贪婪算法以实现最佳决策。该算法依赖于路径敏感的程序分析。对于具有大状态的程序，路径敏感分析也是重量级的。 其次，准确估计通过模糊测试和符号执行探索给定路径的成本是非常重要的。MDPC 根据路径约束的复杂性估计求解代价，并根据覆盖统计估计随机测试的成本。这些估计涉及模糊测试的运行时吞吐量、约束求解器以及符号执行引擎的性能，它们本质上是不同的程序分析技术。因此，定义一个统一的衡量标准来评估不同技术的成本是具有挑战性的。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:4:2","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"3.PROBABILISTIC PATH PRIORITIZATION GUIDED BY MONTE-CARLO 为了解决当前混合模糊测试系统的上述局限性，我们提出了一种新颖的判别调度策略，以更好地结合模糊和执行。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:5:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"A. Key Challenge 如上所述，我们策略的关键挑战是以轻量级方式量化模糊器遍历路径的难度。 有一些解决方案可以使用昂贵的程序分析来量化路径的难度，例如值分析[45]和概率符号执行[5]。然而，这些技术并没有解决我们的问题：如果我们已经执行了重量级分析来量化一条路径的难度，我们还不如只解决路径约束并生成一个输入来遍历这条路径。 最近的一项研究[42]提出了一种理论框架，用于优化的结构测试。它定义了基于程序路径概率和约束求解成本的最优策略，然后将问题简化为带有成本的马尔可夫决策过程（简称 MDPC）。本研究与我们的工作有着相似的问题范围。然而，马尔可夫决策过程本身对于具有大状态空间的程序来说是重量级的。此外，模糊测试和符号执行的成本对于评估和标准化以进行比较是具有挑战性的。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:5:1","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"B.Monte Carlo Based Probabilistic Path Prioritization Model 在这项研究中，我们提出了一种新的基于Monte Carlo的概率路径优先级模型（简称 $MCP^3$）来应对这些挑战。为了轻量化，我们的模型应用Monte Carlo方法来计算通过模糊测试探索路径的概率。要使蒙特卡罗方法有效运作，需要满足两个要求： 对搜索空间的抽样必须是随机的; 需要大量随机抽样才能使估计具有统计意义。 由于 fuzzer 随机生成用于测试程序的输入，我们的见解是将这些输入的执行视为整个程序状态空间的随机样本，因此满足第一个要求。此外，由于模糊测试具有非常高的吞吐量，因此也可以满足第二个要求。因此，通过将模糊测试作为抽样过程，我们可以通过覆盖统计以轻量级方式统计估计概率。 根据蒙特卡罗方法，我们可以通过统计计算遍历此路径的执行与所有执行的比率来简单地估计路径的概率。然而，这种直观的方法并不实用，因为保持路径覆盖是一项具有挑战性和重要性的任务。考虑到这一点，大多数当前的模糊测试技术采用了轻量级覆盖度量，例如块覆盖和分支覆盖。对于这一挑战，我们将执行路径视为连续分支的马尔可夫链[4]。然后，可以基于路径内所有分支的概率来计算路径的概率。 Probability for each branch 量化了模糊测试器通过条件检查并探索分支的难度。方程式1展示了$MCP^3$如何计算分支的概率。 \\begin{equation*} P\\left(br_i\\right) = \\left\\lbrace \\begin{array}{lr}\\frac{cov \\left(br_i \\right)}{cov \\left(br_i \\right) + cov \\left(br_j \\right)}, \u0026 cov \\left(br_i \\right)\\ne 0 \\\\ \\frac{3} {{cov \\left(br_j \\right)}} , \u0026 cov \\left(br_i \\right) = 0 \\end{array} \\right. \\tag{1} \\end{equation*} 在方程1中，$b_{ri}$ 和 $b_{rj}$ 是共享相同前继块的两个分支，$cov(b_{ri})$ 和 $cov(b_{rj})$ 分别指的是 $b_{ri}$ 和 $b_{rj}$ 的覆盖统计，表示模糊测试器的样本覆盖了 $b_{ri}$ 和 $b_{rj}$ 的次数。 当 $b_{ri}$ 已经被模糊测试器探索过（$cov(b_{ri})$ 非零时），$b_{ri}$ 的概率可以通过将 $b_{ri}$ 的覆盖统计除以 $b_{ri}$ 和 $b_{rj}$ 的总覆盖统计来计算。 当 $b_{ri}$ 之前未被模糊测试器探索过（$cov(b_{ri})$ 为零），我们采用统计学中的三比规则[43]来计算 $b_{ri}$ 的概率。三比规则表明，如果某一事件在包含 n 个主体的样本中未发生，则从 0 到 3/n 的区间是该事件在总体中发生率的95%置信区间。当 n 大于$30$时，这是对来自更敏感测试的结果的一个很好的近似。遵循这个规则，如果 $cov(b_{rj})$ 大于$30$，则 $b_{ri}$ 的概率变为 $3/cov(b_{rj})$。如果 $cov(b_{rj})$ 小于$30$，则该概率在统计上没有意义。换句话说，在覆盖统计大于$30$之前，我们将不计算概率。 Probability for each path 为了计算路径的概率，我们应用马尔可夫链模型[19]，将路径视为相继分支之间的连续转换[4]。模糊测试器探索路径的概率计算如方程2所示。 \\begin{equation*} P \\left(path_j \\right) = \\prod \\lbrace P\\left(br_i \\right) | br_i \\in path_j \\rbrace . \\tag{2} \\end{equation*} 在方程2中，$path_j$ 代表一个路径，$b_{ri}$ 表示路径覆盖的分支，$P(b_{ri})$ 表示 $b_{ri}$ 的概率。路径 $path_j$ 的概率，即 $P(path_j)$，通过将沿路径的所有分支的概率相乘来计算。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:5:2","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"C. $MCP^3$ based Execution Tree 在我们的判别式调度策略中，关键思想是从模糊测试执行的运行时信息推断并优先考虑符号执行的路径。为此，我们构建并维护一个基于$MCP^3$的执行树。 定义1 基于$MCP^3$的执行树是是一个有向树 $T = (V, E, \\alpha)$，其中： 顶点集合 $V$ 中的每个元素 $v$ 对应于程序执行期间的程序轨迹中的一个唯一基本块； 边集合 $E⊆V \\times V$ 中的每个元素$e$对应于两个顶点 $v$ 和 $w$ 之间的控制流依赖性，其中$v,w \\in V$。如果一个顶点包含条件检查，则可以有两个输出边； 标记函数$\\alpha: E \\to \\Sigma$将边与概率标签相关联，其中每个标签表示模糊测试器通过该分支的概率。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:5:3","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"4. Design and Implementation 在本节中，我们将介绍 DigFuzz 的系统设计和实现细节。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"A. System Overview 图3显示了DigFuzz的概述。它由三个主要部分组成：1）模糊器; 2）$MCP^3$模型; 3）符号执行器。 Fig. 3: Overview of DigFuzz 我们的系统利用流行的现成模糊器，American Fuzzy Lop（AFL）[47]作为模糊测试组件，并在 angr [38]之上构建了一个符号执行器，这是一个开源符号执行引擎，与 Driller 相同[39]。 DigFuzz 中最重要的组件是$MCP^3$模型。该组件执行execution sampling，构造基于$MCP^3$的执行树，基于概率计算对路径进行优先级排序，并最终将优先路径馈送到 concolic 执行器。 DigFuzz 通过使用初始种子输入启动测试。只要模糊测试器生成输入，$MCP^3$模型就会执行execution sampling以收集覆盖率统计信息，这些统计信息指示采样期间每个分支被覆盖的次数。同时，它还通过跟踪分析构建基于$MCP^3$的执行树，并使用从覆盖统计计算的概率标记树的所有分支。一旦构造了树并且路径用概率标记，则$MCP^3$模型优先考虑树中的所有遗漏路径，并识别具有最低概率执行的路径。 由于为了简化路径约束，符号执行同时在具体值和符号值上执行程序，一旦一个被优先的未遗漏路径被识别，$MCP^3$模型还会确定一个相应的输入，该输入可以引导符号执行达到遗漏的路径。也就是说，通过将输入作为具体值，符号执行器可以沿着遗漏路径的前缀执行程序，生成并收集符号路径约束。当到达遗漏分支时，它可以通过将路径前缀的约束与到达该遗漏分支的条件相结合来生成错过路径的约束。最后，concolic executor通过解决路径约束生成遗漏路径的输入，并将生成的输入反馈给模糊器。同时，它还通过符号执行期间已探索的路径更新执行树。通过利用来自符号执行的新输入，模糊器将能够深入探索、扩展代码覆盖并更新执行树。 总之，DigFuzz 迭代工作。在每次迭代中，$MCP^3$模型通过对模糊器保留的所有输入的跟踪分析来更新执行树。然后，该模型使用执行样本的覆盖统计为每个分支标记其概率。之后，$MCP^3$模型对所有遗漏路径进行优先排序，并选择具有最低执行概率的路径进行符号执行。符号执行器将为跟踪中的遗漏分支生成输入，将通过符号执行期间已探索的路径更新执行树。完成这些步骤后，DigFuzz 将进入另一轮迭代。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:1","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"B. Execution Sampling DigFuzz 需要进行随机抽样来使用蒙特卡罗方法计算概率[35]。基于模糊器的性质就是生成随机输入，我们将模糊过程视对整个程序状态空间的随机抽样过程。由于模糊测试的高吞吐量，生成的样本数量将很快变得足够大，具有统计意义，这由三个规则定义[43]，其中当样本数大于30时，从0到$3/n$的区间是95%的置信区间。 基于这一观察，我们提出了执行抽样的算法（Algorithm 1）。该算法接受3个输入并在 $HashMap$ 中生成 coverage 统计信息。 算法1的3个输入 1）目标二进制$P$；2）模糊测试器$Fuzzer$；3）存储在$Set_{inputs}$中的初始种子 给定这3个输入，算法在模糊测试过程中进行迭代抽样。 $Fuzzer$使用$P$和$Set_{inputs}$以生成新输入 $Set_{NewInputs}$（Ln.7）。 然后，对于 $NewInputs$ 中的每个输入，我们收集由$P$和$input$（Ln.9）确定的路径内的每个分支的覆盖统计信息，并进一步更新存储在$HashMap_{CovStat}$中的现有覆盖统计（Ln.11和12）。 最后，算法将$Set_{NewInputs}$合并到$Set_{inputs}$（Ln.15）并开始新的迭代。 Algorithm 1 Execution Sampling ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:2","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"C. Execution Tree Construction 如图3所示，DigFuzz 使用来自模糊器的运行时信息生成基于$MCP^3$的执行树。 Fig. 3: Overview of DigFuzz Algorithm 2展示了树构建过程。 算法2的输入、输出 输入，也是Algorithm 1的输出： 1）目标二进制文件的控制流图$CFG$； 2）fuzzer 保留的输入$Set_{inputs}$； 3）覆盖统计$HashMap_{CovStat}$ 输出：基于$MCP^3$的执行树 $ExecTree$ 算法主要分为两个步骤。 Step1：对 $Set_{inputs}$中的每个输入执行跟踪分析，提取相应的跟踪，然后将跟踪合并到 $ExecTree$ 中（Ln. 6到11） Step2：计算执行树中每个分支的概率（Ln. 12到16）。 为实现这一点，对于 $ExecTree$ 中的每个分支$b_{ri}$，我们通过检查 $CFG$（Ln. 13）提取其相邻分支$b_{rj}$（$b_{ri}$和$b_{rj}$共享包含条件检查的相同前继块）。 然后，算法利用方程1计算$b_{ri}$的概率（Ln. 14）。 之后，算法使用计算得到的概率标记执行树 $ExecTree$（Ln. 15）并输出新标记的 $ExecTree$。 Algorithm 2 Execution Tree Construction 为了避免执行树中潜在的路径爆炸问题，我们只对由模糊测试保留的种子输入执行跟踪分析。模糊器通常将那些具有新代码覆盖的突变输入视为进一步突变的种子。对这些保留的种子进行跟踪是一种有前景的方法，可以对探索的程序状态进行建模。对于沿着执行跟踪的每个分支，只要模糊测试器尚未覆盖相反分支，就标识为一个遗漏路径，该路径指的是与未覆盖的分支连接的跟踪前缀。换句话说，执行树不会包括一个相反分支尚未被覆盖的遗漏分支。 为了简化表示，我们提供了一个运行示例，它简化了CQE数据集[13]中的程序，代码如图4所示。漏洞由特定字符串保护，很难进行模糊检测。 图4.运行示例 图5示出了用于图4中的运行示例的基于$MCP^3$的执行树。每个节点表示一个基本块。每条边都是一个用概率标记的分支。可以观察到树中有2个trace（红色：$t1 =⟨b1，b2，b6，b12，b13，b7，b9，b11⟩$和蓝色：$t2 =⟨b1，b3，b4，b12，b14⟩$）。请注意，概率是通过多个执行样本计算的。在此示例中，我们为了简化呈现仅提供了两个跟踪。 图5：具有概率的执行树 ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:3","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"D. Probabilistic Path Prioritization 我们基于概率对路径进行优先排序。如方程2所示，路径被视为一个马尔可夫链，其概率是基于路径内所有分支的概率计算得出的。路径可以表示为一系列已覆盖的分支，每个分支都标记有其概率，该概率表示随机输入能够满足条件的可能性有多大。因此，我们利用马尔可夫链模型，将路径的概率看作是转换的概率序列。 算法3. DigFuzz中的路径优先排序 Algorithm 3详细地呈现了这个算法。 算法3的输入、输出 输入，也是Algorithm 2的输出：基于$MCP^3$的执行树$ExecTree$ 输出：$Set_{Prob}$，一组未探索（遗漏）的路径及其概率 DigFuzz 将根据$Set_{Prob}$对这些**未探索（遗漏）**的路径进行进一步的优先排序，并将概率最低的路径提供给符号执行。该算法： 从执行树遍历开始。对于 $ExecTree$ 中每个跟踪上的每个分支$b_{ri}$，它首先提取相邻的分支$b_{rj}$（Ln. 5），然后收集沿给定跟踪未探索的路径（Ln. 6）。 然后，算法通过调用实现方程2的 $CalPathProb()$ 计算了未探索路径的概率，并将信息存储在 $Set_{Prob}$中。 最终，该算法生成$Set_{Prob}$，即每个跟踪的未探索路径及其概率。 得到$Set_{Prob}$后，我们将 按概率降序对未探索路径进行优先排序，并确定概率最低的路径供符号执行使用。 确定输入，引导 concolic 执行器优先探索概率最低的路径。 以图4中的程序为例。在图5中，未探索（遗漏）的分支显示为虚线。在构建了执行树并正确标记之后，使用 Algorithm 3来获取未探索的路径并计算这些路径的概率。我们可以观察到总共有4条未探索的路径，分别记为$P_1$、$P_2$、$P_3$和$P_4$。通过调用 $CalPathProb()$ 函数，这些未探索路径的概率如图中所示计算，其中概率最低的路径是$P_1$。为了引导 concolic 执行器探索$P_1$，DigFuzz将选择导致跟踪$〈b1, b2, b6, b12, b13, b7, b9, b11〉$的输入，并将此输入分配为 concolic 执行的具体值，因为此跟踪与未探索路径$P_1$共享相同的路径前缀$〈b1, b2, b6, b12, b13, b7, b9〉$。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:4","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"6. Discussion ","date":"2023-12-10","objectID":"/posts/digfuzz/:7:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"A. Threats to Validity 我们的实验结果基于论文中提供的有限数据集。已经努力在实际程序上评估 DigFuzz，但是当 Angr [38]遇到不支持的系统调用时，它无法对程序进行符号执行。因此，结果可能无法完全代表实际程序。对这些程序进行评估是必要的，以便就拟议技术在实践中的有效性得出结论。我们将把对真实世界程序的评估留作未来的工作。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:7:1","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"B. Limitations 首先，虽然DigFuzz中的“区别性调度”被设计为轻量级方法，但它仍然会产生一些运行时和内存消耗开销，包括收集模糊测试的运行时信息和构造执行树。但根据评估，可以看到对于模糊测试的吞吐量减少是可以忽略不计的。此外，由于树中的每个节点仅携带非常有限的信息，因此执行树的总内存消耗是非常易于管理的。 其次，由于DigFuzz仅估计模糊探测器的路径难度，但没有考虑约束求解的复杂性，所以挑选的路径收集到的约束可能是不可解的，这可能导致浪费整个符号执行循环。此外，可能导致漏洞的最有希望的路径也可能不是DigFuzz选择的最难的路径。这两个限制是由于我们找到正确的探索路径的模型。我们考虑将它们解决为未来的工作。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:7:2","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"7. Related Work 模糊测试 Fuzzing和符号执行 symbolic execution是程序测试的两种主流技术。许多先前的努力已经致力于改进它们[3]，[27]，[33]，[36]。 BuzzFuzz [17]利用动态污点标记来识别由可疑指令处理的输入字节。Dowser [20]采用反向工程技术来识别与可疑功能相关的输入字段。Vuzzer [34]利用控制流和数据流特征来准确确定何时以及如何变异这些输入。Skyfire [40]利用现有样本中的知识生成用于模糊测试程序的分布良好的种子输入。Angora [12]旨在通过解决路径约束而不使用符号执行来增加分支覆盖。T-Fuzz [32]首先允许模糊测试器在去除了无法绕过的健全性检查的转换程序上工作。作为辅助的后处理步骤，T-Fuzz 利用基于符号执行的方法来过滤掉假阳性。CollAFL [16]是一种基于覆盖率敏感的模糊测试解决方案，通过提供更准确的覆盖信息来减轻路径冲突。它还利用覆盖信息应用了三种新的模糊测试策略。Veritesting [1]通过采用静态符号执行来放大动态符号执行的效果，以解决路径爆炸问题。Mayhem [10]提出将在线和离线符号执行结合起来处理内存耗尽的问题。 DigFuzz 的主要贡献在于提出了一种更有效的策略，将模糊测试与符号执行结合起来。因此，模糊测试和符号执行的进展超出了我们的范围。 Hybrid fuzzing system 大多数混合模糊测试系统遵循通过选择性符号执行增强模糊测试的观察[9]，[27]，[38]，[40]。TaintScope [40]部署动态污点分析来识别校验点，然后应用符号执行生成满足校验和的输入。T-Fuzz [31]首先允许模糊测试器在经过去除健全性检查的转换程序上工作，然后利用基于符号执行的方法来过滤出假阳性。SAVIOR [13]提出了一种基于漏洞的混合模糊测试系统。它优先考虑具有更高潜力导致发现更多漏洞的种子进行合符号执行。此外，它在合符号执行期间启用了安全检查。HFL [25]将模糊测试与符号执行相结合，以解决内核特定的模糊测试挑战。PANGOLIN [23]设计了基于多面体路径抽象的增量混合模糊测试，该抽象在合符号执行阶段保留了探索状态，并允许对现有技术进行更有效的变异和约束求解。与这些技术相比，DigFuzz 通过基于覆盖统计量量化模糊测试探索路径的难度来优先考虑路径。 另一种混合模糊测试系统是将符号执行视为输入生成或路径选择的引导者。Pak [30]提出了一种混合模糊测试系统，将符号执行应用于收集路径约束，然后系统生成符合路径谓词并过渡到模糊测试器的输入。DeepFuzz [5]采用概率符号执行为程序路径分配概率，然后利用这些概率来引导模糊测试中的路径探索。 MDPC [42]提出了一种理论框架，用于最佳的符号测试。它基于程序路径的概率和约束求解的成本来定义最优策略，这与我们识别路径概率的想法类似。与使用重量级技术来计算模糊测试和符号执行成本的MDPC [42]相比，我们的模型使用覆盖率统计来计算概率，这更加轻巧和实用。 QSYM [46]使用动态二进制转换将符号仿真与本机执行集成在一起。 它还减轻了传统的严格健全性要求，减轻了传统的严格健全性要求，使其可扩展到现实世界的程序。 主要重点是使其可以扩展到真实世界的程序。 主要重点是使其可以扩展到真实世界的程序。 有选择地只派遣最难的工作的主要焦点。 Path prioritization in symbolic execution 路径优先化有望减轻动态符号执行中的路径爆炸问题。代表性研究包括启发式技术和声音程序分析技术[9]。这些启发式方法包括使用控制流图来指导探索，基于频率和基于随机的技术[6] - [8]。最近，采用路径优先级与进化搜索相结合，其中定义适应度函数来指导符号执行[2]。与这些路径探索技术相比，DigFuzz中的路径优先级是将具有概率的路径优先化为模糊测试的难度。据我们所知，我们是第一个研究混合模糊测试系统中的路径优先级问题的人。 定向符号执行还使用路径优先级来达到目标。这些技术旨在为目标语句或分支搜索可行路径[37]，[45]。与有向符号执行技术相比，DigFuzz中的路径优先级是识别用于执行的目标路径，而不是为给定目标搜索可行路径。 Seed scheduling in fuzzing 种子选择在模糊测试中起着重要作用，并且已经提出了一些研究来通过优先考虑种子投入来改进种子调度[4]，[11]，[44]。 Woo等人。 [44]模型黑盒模糊作为一个多臂强盗问题，其中种子的能量是根据它是否在任何先前的模糊迭代中暴露出崩溃来计算的。 AFLfast [4]通过为AFL较少采用的输入分配更多能量来改进AFL的种子选择策略。这些种子调度技术背后的基本见解是搜索变异执行更有可能发现新程序状态的种子。在我们未来的工作中，我们计划设计调度技术，以便使用难以探索的路径卸载模糊器。 测试用例优先级尝试以提高检测到错误率的方式重新排序测试用例[21]，[22]，[24]，[26]，[28]。 本研究中的路径优先级是为了获得最有可能阻塞模糊器的错过路径。 搜索算法也与基于搜索的测试优先级和其他基于搜索的软件工程密切相关[23]。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:8:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"8. Conclusion 指出了一些最先进的混合模糊测试系统中采用的“需求启动”和“最优切换”策略中的一些根本限制。 进一步提出了一种discriminative dispatch策略：通过设计一个基于Monte Carlo的概率路径优先模型来更好地利用concolic execution的能力，以量化每条路径的难度。 实现了原型系统DigFuzz。评估结果显示，与最先进的混合模糊测试系统相比，DigFuzz 对于增加代码覆盖和发现漏洞的数量贡献更大。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:9:0","tags":["符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"本文介绍适用于多路径任务的多核系统pWCET分析工具——PTATM的初始化工作，如内核、环境变量等。","date":"2023-11-18","objectID":"/posts/ptatm-1/","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"本文介绍 PTATM 的初始化工作，如内核、环境变量等。 PTATM简介 PTATM结合了多路径任务分段方法、共享Cache竞争下的任务段信息收集方法以及分段任务的pWCET分布生成方法，是一种适用于多路径任务的多核系统pWCET分析工具。 ","date":"2023-11-18","objectID":"/posts/ptatm-1/:0:0","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"一、系统环境 PTATM 开发时的环境为： 环境 配置 操作系统 Ubuntu 22.04 内核版本 5.19.0-32-generic 因此，理论上只要是5.19.0-x内核版本的 Ubuntu22.04 即可。使用uname -r命令可以查看当前系统版本号。下图表示当前系统的内核的版本是5.19.0-50-generic，满足运行条件，可以跳过本节系统环境配置。 image.png ","date":"2023-11-18","objectID":"/posts/ptatm-1/:1:0","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"1.1 查看系统已安装内核 dpkg --get-selections | grep linux-image | grep -v deinstall 使用上面的命令查看系统已经安装的所有内核版本。如果有5.19.0-x内核版本，跳到1.3 更新 grub。 image.png ","date":"2023-11-18","objectID":"/posts/ptatm-1/:1:1","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"1.2 更换 Linux 内核 如果内核版本不是5.19.0-x，则需要更换内核。使用下面的命令查看可以安装的内核版本。 apt-cache search linux-image-5.19.* | grep generic image.png 选择图中最后一个内核版本linux-image-5.19.0-50-generic安装： sudo apt-get install linux-image-5.19.0-50-generic sudo apt-get install linux-headers-5.19.0-50-generic linux-modules-extra-5.19.0-50-generic 如果要安装其他版本的内核，记得把上面命令中的5.19.0-50-generic改成对应的版本。 ","date":"2023-11-18","objectID":"/posts/ptatm-1/:1:2","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"1.3 更新grub 还是假设要更换到5.19.0-50-generic内核版本。 # 将 5.19.0-50-generic 替换你需要的version sudo update-initramfs -u -k 5.19.0-50-generic 修改 grub 使5.19.0-50-generic为默认启动项 sudo nano /etc/default/grub 将GRUB_DEFAULT一项修改为： \"Advanced options for Ubuntu\u003eUbuntu, with Linux 5.19.0-50-generic\" 同理，记得把5.19.0-50-generic替换你需要的 version image.png 更新 grub，然后重启。查看内核版本是否切换成功。 # 更新 grub sudo update-grub # 重启 sudo reboot # 查看当前内核版本 uname -r ","date":"2023-11-18","objectID":"/posts/ptatm-1/:1:3","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"二、安装 perf 使用下面的命令安装当前内核版本的 perf： sudo apt-get install linux-tools-common -y sudo apt-get install linux-tools-\"$(uname -r)\" -y sudo apt-get install linux-cloud-tools-\"$(uname -r)\" -y sudo apt-get install linux-tools-generic -y sudo apt-get install linux-cloud-tools-generic -y ","date":"2023-11-18","objectID":"/posts/ptatm-1/:2:0","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"三、Python 环境 使用 Python3，运行时如果发现有依赖包没安装，自行使用pip3 install \u003cmodule\u003e安装缺少的依赖包。 ","date":"2023-11-18","objectID":"/posts/ptatm-1/:3:0","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"四、环境变量 在PTATM的本地文件夹中打开终端，输入pwd查看当前目录位置： image.png 之后，每次需要运行PTATM时，先在终端导入这个环境变量： export PTATM=/home/pzy/project/PTATM_backup 设置PTATM目录 ","date":"2023-11-18","objectID":"/posts/ptatm-1/:4:0","tags":["PTATM","Linux"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"前言 最开始阅读文献是使用readpaper 平台，在线翻译、做笔记、文献管理都很方便，具体使用可以参考同济子豪兄和官方 ReadPaper 保姆级教程。 但随着科研深入，readpaper 的文献管理功能逐渐跟不上了，而且很多文献没有 PDF 文件，需要自己下载后上传。 经过研究发现，相比 Endnote，zotero 功能够用，而且开源。通过插件也可以实现 readpaper 的在线翻译功能，配合 snipaste 软件可以截图固定，非常 nice！ 【注】本文参考了知乎专栏。 ","date":"2023-11-10","objectID":"/posts/zotero-config/:1:0","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"1.下载安装 ","date":"2023-11-10","objectID":"/posts/zotero-config/:2:0","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"1.1 蓝奏云 官网访问困难的，可以点击蓝奏云链接下载，更新于2023-11-8 密码:2333 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:2:1","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"1.2 官网下载 1.2.1 本体Zotero 下载 Zotero 官网访问速度慢的，建议使用蓝奏云中Zotero-6.0.18_setup.exe进行安装。 1.2.2 浏览器插件：Zotero Connector下载 1.2.3 翻译器：Zotero translators_CN下载 Zotero 官网访问速度慢的，建议下载蓝奏云中的translators.zip。 1.2.4 插件 zotero 官方插件下载地址： https://www.zotero.org/support/plugins zotero 中文社区推荐插件： https://plugins.zotero-chinese.com/#/ 访问速度慢的，建议下载蓝奏云中插件.zip，压缩包里包含本文全部插件。 技巧 强烈建议下载Zotero 插件合集，这个插件可以帮你自动管理、更新zotero插件。 image.png 插件安装 方法一： 打开【Zotero】 点击【工具】—【插件】 点击右上角【⚙】—【Install Add-on From File…】—选中需要安装的插件（部分插件不适用该方法） 安装完毕后重启【Zotero】 image image image image image 方法二： 打开【Zotero】 点击【工具】—【插件】 将需要安装的插件【拖动】至该页面 安装完毕后重启【Zotero】 按需启用插件。我的插件启用情况如下： image ","date":"2023-11-10","objectID":"/posts/zotero-config/:2:2","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"2.基础配置 打开【Zotero】—【编辑】—【首选项】 ","date":"2023-11-10","objectID":"/posts/zotero-config/:3:0","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"2.0 高级 2.0.1 更改数据存储位置 安装完 zotero 后，第一件事就是更改数据存储位置。因为以后要存 PDF 文献，所以建议放在一个存储空间充裕的地方。改完位置后点击 OK 保存，重启 zotero 生效。 image 2.0.2 添加搜索引擎 【Zotero】—【编辑】—【首选项】— 文件和文件夹 —【打开数据文件夹】 image locate — 打开engines.json文件 image 编辑engines.json文件，将里面的内容全选删除，粘贴为以下内容并保存。 [ { \"_name\": \"熊猫学术\", \"_alias\": \"panda\", \"_description\": \"谷歌学术镜像\", \"_icon\": \"https://sc.panda321.com/static/base/images/favicon.ico\", \"_hidden\": false, \"_urlTemplate\": \"https://sc.panda321.com/scholar?hl=zh-CN\u0026as_sdt=0%2C5\u0026q={z:title}\", \"_urlParams\": [], \"_urlNamespaces\": { \"rft\": \"info:ofi/fmt:kev:mtx:journal\", \"z\": \"http://www.zotero.org/namespaces/openSearch#\", \"\": \"http://a9.com/-/spec/opensearch/1.1/\" }, \"_iconSourceURI\": \"https://sc.panda321.com/static/base/images/favicon.ico\" }, { \"_name\": \"CNKI新版\", \"_alias\": \"CNKI\", \"_description\": \"CNKI新版\", \"_icon\": \"http://kns8.cnki.net/favicon.ico\", \"_hidden\": false, \"_urlTemplate\": \"http://kns8.cnki.net/kns/DefaultResult/Index?dbcode=SCDB\u0026kw={z:title}\u0026korder=SU\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\", \"\": \"http://a9.com/-/spec/opensearch/1.1/\" }, \"_iconSourceURI\": \"http://kns8.cnki.net/favicon.ico\" }, { \"_name\": \"南京师范大学图书馆\", \"_alias\": \"南京师范大学图书馆\", \"_description\": \"南京师范大学图书馆\", \"_icon\": \"http://lib.njnu.edu.cn/images/njnulogo.png\", \"_hidden\": false, \"_urlTemplate\": \"http://opac.njnu.edu.cn/opac/openlink.php?strSearchType=title\u0026match_flag=forward\u0026historyCount=1\u0026strText={z:title}\u0026doctype=ALL\u0026with_ebook=on\u0026displaypg=20\u0026showmode=list\u0026sort=CATA_DATE\u0026orderby=desc\u0026location=ALL\u0026csrf_token=%29lW1vOCx%7B%2F\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"http://lib.njnu.edu.cn/images/njnulogo.png\" }, { \"_name\": \"豆瓣读书\", \"_alias\": \"豆瓣读书\", \"_description\": \"豆瓣读书\", \"_icon\": \"https://book.douban.com/favicon.ico\", \"_hidden\": false, \"_urlTemplate\": \"https://search.douban.com/book/subject_search?search_text={z:title}\u0026cat=1001\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"https://book.douban.com/favicon.ico\" }, { \"_name\": \"国学数典\", \"_alias\": \"国学数典\", \"_description\": \"国学数典\", \"_icon\": \"https://bbs.ugxsd.com/static/image/common/logo_gxsd.png\", \"_hidden\": false, \"_urlTemplate\": \"https://bbs.ugxsd.com/search.php?mod=forum\u0026searchid=2634\u0026orderby=lastpost\u0026ascdesc=desc\u0026searchsubmit=yes\u0026kw={z:title}\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"https://bbs.ugxsd.com/static/image/common/logo_gxsd.png\" }, { \"_name\": \"读秀图书\", \"_alias\": \"读秀图书\", \"_description\": \"读秀图书\", \"_icon\": \"https://book.duxiu.com/images/small0408.jpg\", \"_hidden\": false, \"_urlTemplate\": \"https://book.duxiu.com/search?Field=all\u0026channel=search\u0026sw={z:title}\u0026ecode=utf-8\u0026edtype=\u0026searchtype=\u0026view=0\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"https://book.duxiu.com/images/small0408.jpg\" }, { \"_name\": \"Obsidian\", \"_alias\": \"Obsidian\", \"_description\": \"在Obsidian中搜索\", \"_icon\": \"https://obsidian.md/favicon.ico\", \"_hidden\": false, \"_urlTemplate\": \"obsidian://search?vault=Zotero\u0026query={z:title}\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"https://obsidian.md/favicon.ico\" }, { \"_name\": \"Open Notes\", \"_alias\": \"Open Notes\", \"_description\": \"笔记路径放在Rights字段\", \"_icon\": \"https://figurebed-iseex.oss-cn-hangzhou.aliyuncs.com/img/20201017133213.png\", \"_hidden\": false, \"_urlTemplate\": \"file:///{z:rights}\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\", \"\": \"http://a9.com/-/spec/opensearch/1.1/\" }, \"_iconSourceURI\": \"https://figurebed-iseex.oss-cn-hangzhou.aliyuncs.com/img/20201017133213.png\" }, { \"_name\": \"TOC of Notes\", \"_alias\": \"TOC of Notes\", \"_description\": \"打开所有笔记的目录\", \"_icon\": \"https://figurebed-iseex.oss-cn-hangzhou.aliyuncs.com/img/20201025110921.png\", \"_hidden\": false, \"_urlTemplate\": \"file:////","date":"2023-11-10","objectID":"/posts/zotero-config/:3:1","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"2.1 常规 我的常规配置： image ","date":"2023-11-10","objectID":"/posts/zotero-config/:3:2","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"2.2 同步 我采用了坚果云进行同步。 image 坚果云使用 注册【坚果云账户】 点击右上角【用户名】—进入【账户信息】 进入【安全选项】 向下拖动进入【第三方应用管理】—点击【添加应用】—输入应用名【zotero】 这里【示例】中的【服务器地址】、【账户】和【密码】（应用密码）即是【WebDAV】需填写的【URL】、【用户名】和【密码】 image 返回【Zotero】—【首选项】—【同步】 将【同步文献库的附件】改为【WebDAV】，输入【URL】、【用户名】和【密码】，点击【验证服务器】成功即可。 image 【注】坚果云验证失败看这里。 ","date":"2023-11-10","objectID":"/posts/zotero-config/:3:3","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"2.3 引用 2.3.1 zotero 官方7714样式 点击【获取更多样式】 搜索【7714】即可安装国标引用样式。注意有1987、2005和2015三个时间，note、author-date 和 numeric 三个格式，鼠标悬停即可【预览】样式。 image 2.3.2 比较贴近东北大学要求的7714样式 zotero 官方的7714样式存在一些问题，如不能区分中英文文献，导致引用英文文献也是“等”，而不是“et al”。github 上的Chinese-STD-GB-T-7714-related-csl仓库（Gitee）提供7714 2015的官方样式及众多修改版，其中002gb样式比较符合东北大学的要求，除了网络文献的引用顺序有点差异。 image 从仓库或者前文的蓝奏云链接中下载样式 点击+号，选中已下载的002 csl 样式，打开。 会提示***.csl不是一个有效的 CSL 1.0.2 样式文件，你可能不能和Zotero一起正常工作，不用管，点击 OK 继续导入。 image 点击 OK 保存退出首选项。然后重新打开【编辑】—【首选项】— 【导出】— 项目格式，选择为7714 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:3:4","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.插件配置 下面这些插件都建议在中文插件网站下载。注意要下载对应 zotero 版本的插件，本文中下载的都是 zotero6的插件。 ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:0","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.1 Zotero 插件合集 点击工具栏中的 image ，自动管理、更新、添加 Zotero 插件 image.png ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:1","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.1 ZotFile 功能 自动修改附件名 提取附件中的笔记 【Attaching New Files】—添加新附件 【Send to Tablet】—多端同步阅读 配置 点击【工具】—进入【Zotfile 首选项】 【General Settings】 - 【Source Folder For Attaching New Files】：自动抓取新附件建议设置为【浏览器等默认下载地址】 - 【Location of Files】：附件本地存储地址建议选择【Attach stored copy of files(s)】，存储在 Zotero 的根目录下 image 【Send to Tablet】：若非本地存储空间不够，不建议使用 具体设置可参考此处 【Renaming Rules】和【Advanced Settings】：可自行修改 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:2","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.2 ZoteroQuickLook 功能 按【空格】实现快速预览 配置 下载【QuickLook】本体安装，记住安装目录 Windows：QuickLook for Windows 【Zotero】—【编辑】—【首选项】—— 【高级】—— 【设置编辑器】，搜索extensions.zoteroquicklook.customviewcommand，双击将里面的内容修改为QuickLook.exe的文件路径 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:3","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.3 茉莉花-Jasminum 功能 拆分或合并 Zotero 中条目作者姓和名 根据知网上下载的文献文件来抓取引用信息（根据文件名） 添加中文 PDF/CAJ 时，自动拉取知网数据，该功能默认关闭。需要到设置中开启，注意添加的文件名需要含有中文，全英文没有效果（根据文件名） 为知网的学位论文 PDF 添加书签 更新中文翻译器 配置 如何自动为知网学位论文添加【书签】 从知网下载的 PDF 格式【学位论文】不显示书签（CAJ 格式显示），【茉莉花】提供自动添加功能。要使用添加【书签】功能需要下载【PDFtk Server】，文件见网盘。 下载并安装【PDFtk Server】，蓝奏云里有 打开【Zotero】—进入【首选项】—进入【茉莉花】 选择【PDFtk Server】的路径，最后须选择 bin image ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:4","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.4 zotero citation update 功能 更新文献被引用数 配置 列标题启用【存档位置】 image 使用：工具——更新引用 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:5","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.5 Zotero PDF Translate 各翻译引擎 api 格式设置详见github 各翻译引擎 api中文申请教程 【注】不想看文字的也可以看这个 up 的视频讲解，演示了如何申请小牛 api 使用与功能 双击 PDF 附件（要用 zotero 打开 PDF）。点击右上角展开翻译窗口。鼠标选中文字自动翻译。 image 翻译引擎配置 建议使用腾讯云 api，免费额度量大管饱，翻译效果也很好。或者小牛、有道智云，这两虽然免费额度是有期限的，但是可以建立自己的术语表，翻译起来更准确。 【注】小牛翻译注册后需要在首页手动领取100万免费流量，有效期一年 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:6","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.6 Crush Reference 论文右侧——参考文献——点击“刷新”，自动拉取参考文献目录。 image.png ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:7","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.7 移动端 ：多平台同步阅读环境配置 具体操作与 #2.2 同步 设置相同 iPadOS：【Papership【绑定 Zotero 账号+WebDav 可参考 青柠学术 - 详解【Zotero+PaperShip+坚果云】文献生态的同步机制！ Android：【Zoo for Zotero】绑定 Zotero 账号+WebDav 可参考 青柠学术 - Zoo for Zotero，安卓上阅读 Zotero 文献的利器！ ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:8","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.工作流 ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:0","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.0 联动 obsidian 参考最新zotero与obsidian笔记联动教程（可代替citations和mdnotes） ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:1","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.1 工作流：以 Zotero 为中枢 还是参考 Eleven 的知乎专栏 image 检索 / 阅读 / 笔记 确定题目 / 开题报告 / 文献综述 下载论文——Zotero 抓取 可视化文献处理——Zotero 存储 bib，导出处理 多端同步阅读——移动端同步 Zotero 账号 存档 \u0026 归类——Zotero 文件夹分类以及 Tag 分类 文献笔记——与 Zotero 条目联结 写作 插入引文生成参考文献——Zotero 通过文字处理软件插件插入参考文献 调整格式——修改 Zotero 参考文献引用格式设置 回溯 用 Zotero 搭建自己的知识库 ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:2","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.2 下载论文 正着下：抓取 单篇——浏览器中打开一篇论文的详情页，左键点击右上角【插件】，出现【Full Text PDF】即为成功 image 批量——在知网搜索页面点击右上角【插件】，跳出【Zotero Item Selector】 image 反着下 识别：从文献到题录 英文文献会自动抓取元数据，若失败请点【重新抓取 PDF 的元数据】 image 检索：从题录到文献，利用【搜索引擎】进入知网下载文献 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:3","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.3 储存\u0026分类 4.3.1 新建分类 image 4.3.2 Tag 管理 添加 Tag image 给 Tag 添加颜色 image 检索 Tag：单击左下角【Tag 区】中的 Tag 4.3.3 高级检索 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:4","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.4 阅读 4.4.1 导出 PDF 批注 image 4.4.2 联结文献笔记 ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:5","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.5 写作 4.5.1 插入参考文献 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:6","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.6 分享 4.6.1 导出条目及附件 导出分类，然后选择【Zotero RDF】格式，勾选附件和笔记 image 4.6.2 团队协作 新建群组 image 三种类型的群组 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:7","tags":["科研"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["hugo"],"content":"LoveIt提供了admonition shortcode，支持 12 种样式，可以在页面中插入提示的横幅。","date":"2023-11-08","objectID":"/posts/loveit-admonition/","tags":["hugo"],"title":"Loveit自带的admonition样式","uri":"/posts/loveit-admonition/"},{"categories":["hugo"],"content":"admonition样式 LoveIt提供了admonition shortcode，支持 12 种样式，可以在页面中插入提示的横幅。代码如下： {{\u003c admonition \u003e}} 一个 **注意** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition abstract \u003e}} 一个 **摘要** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition info \u003e}} 一个 **信息** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition tip \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition success \u003e}} 一个 **成功** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition question \u003e}} 一个 **问题** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition warning \u003e}} 一个 **警告** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition failure \u003e}} 一个 **失败** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition danger \u003e}} 一个 **危险** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition bug \u003e}} 一个 **Bug** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition example \u003e}} 一个 **示例** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition quote \u003e}} 一个 **引用** 横幅 {{\u003c /admonition \u003e}} ","date":"2023-11-08","objectID":"/posts/loveit-admonition/:1:0","tags":["hugo"],"title":"Loveit自带的admonition样式","uri":"/posts/loveit-admonition/"},{"categories":["hugo"],"content":"效果展示 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 ","date":"2023-11-08","objectID":"/posts/loveit-admonition/:1:1","tags":["hugo"],"title":"Loveit自带的admonition样式","uri":"/posts/loveit-admonition/"},{"categories":["hugo"],"content":"命名参数 admonition shortcode 有以下命名参数: type [可选] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip 一个 技巧 横幅 ","date":"2023-11-08","objectID":"/posts/loveit-admonition/:1:2","tags":["hugo"],"title":"Loveit自带的admonition样式","uri":"/posts/loveit-admonition/"},{"categories":["技术"],"content":"通过热点共享网络，配置网关，让让局域网内的手机等设备也走本机代理","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":" 注意 准备清单 硬件：具备无线网卡的PC，且能正常使用WiFi；其他能无线上网的设备 软件：正确配置能翻出去的代理软件 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:0:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"〇、写在前面 本教程里主要是通过热点实现局域网，因此获取本机的局域网IP有些麻烦。大多数网络是通过路由器/交换机组成局域网，如果你是这样的情况，就可以直接进入路由器后台界面，查看连接设备的局域网IP，并且可以跳过教程中的热点设置部分。 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:1:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"一、Windows端设置 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:2:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"1.1 代理软件设置 打开v2rayN，开启代理确认能翻出去。【设置】-【参数设置】，勾选允许来自局域网的连接 image 记录局域网http端口号。如下图，此时http端口号为10811 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:2:1","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"1.2 Windows防火墙设置 搜索防火墙，打开高级安全 Windows Defender 防火墙-入站规则-新建规则 防火墙新建规则 规则类型：端口（O） 协议和端口：TCP、特定本地端口填代理软件的局域网http端口号10811 操作、配置文件：保持默认，直接点下一步即可 名称：随便填 最后点击完成结束新建规则 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:2:2","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"1.3 Windows热点设置(可根据#〇中内容选择跳过) 打开终端（或者cmd），输入ipconfig命令查看当前存在的Windows IP 配置。如下图，我这里共有6个网络连接配置，其中第一个以太网适配器 以太网是真正有网络连接的，记住它 image Windows【设置】-【网络和Internet】-【移动热点】，打开移动热点。可以关闭节能，防止热点长时间未使用被自动关闭 image 打开终端，再次输入ipconfig命令，可以看到无线局域网适配器 本地连接* 10有了连接，这就是刚刚打开的热点。记录这里的ipv4地址：192.168.137.1 image 打开控制面板-网络和Internet-网络连接 image 双击打开以太网适配器 以太网状态面板-属性-共享-勾选允许其他网络用户，家庭网络连接选择Windows热点对应的本地连接* 10 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:2:3","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"二、移动端设置 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:3:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"2.1 安卓端 打开WiFi，输入密码连接Windows热点 点击 →箭头 进入WiFi设置界面 代理改为手动 主机名改为热点对应的无线局域网适配器 本地连接* 10ipv4地址：192.168.137.1 端口改成代理软件的局域网http端口号10811 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:3:1","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"2.2 iOS端 打开WiFi，输入密码连接Windows热点 点击 ℹ️ 进入WiFi设置界面 点击 HTTP代理 配置代理 image 选择手动，服务器填写热点对应的本地连接* 10ipv4地址：192.168.137.1；端口改成代理软件的局域网http端口号10811 点击存储保存代理配置 image 打开Google验证是否成功代理。如下图，通过热点共享代理成功 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:3:2","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"2.3 其他移动设备同理设置WiFi代理即可 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:3:3","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"移动端作为热点共享本机代理 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:4:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"一、代理端设置 1.1 代理软件设置 以安卓端v2rayNG为例，在设置里勾选允许来自局域网的连接，记录HTTP代理端口为10809 image 1.2 代理机热点设置(可根据#〇中内容选择跳过) 移动端开启热点后，首先也是需要获得热点的ipv4地址。为了叙述方便，称开启热点的机器为代理机，连接热点的机器为连接机。获取代理机的ipv4地址一般有两种方法 连接机连接代理机的热点后，在WiFi详情界面查看服务器地址。该地址就是代理机的ipv4地址 代理机如果是安卓手机，可以下载MT管理器。点击左上角≡，打开终端模拟器。在开启热点前后，使用ifconfig命令查看多出来的ipv4地址。如下图，可以看到ipv4地址为192.168.70.209 苹果设备可以尝试使用iSH Shell等类似软件。 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:4:1","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"二、连接端设置 同理，连接端连接热点后，在WiFi设置里打开代理，设置为手动，地址、端口分别填写为192.168.70.209和10809 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:4:2","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"一些内网的主机可以访问公网，但是关闭了公网SSH端口。可以通过ZeroTier搭建VPC，让内网主机与client位于同一虚拟局域网中，实现SSH连接。","date":"2023-11-08","objectID":"/posts/zerotier-ssh/","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"zerotier官网：https://www.zerotier.com/ 官方文档：https://zerotier.atlassian.net/wiki/spaces/SD/overview ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:0:0","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"一、目的 假设存在网络拓扑如下图： image 内网中的主机A有公网访问权限，可以和PC通信。但是由于主机A没有公网IP或ssh等服务端口不向外网开放（主机A的服务端口只向内网机器开放），导致PC无法使用ssh等工具直接访问主机A。 我们要做的就是通过ZeroTier给PC、主机A创建一个overlay内网，忽略underlay，让PC、主机A以为双方都在同一个局域网内。这样PC就可以用ZeroTier内网IP来直接访问主机A了。 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:1:0","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"二、创建一个网络 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:2:0","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"2.1 创建网络 进入zerotier官网，用邮箱注册一个账号。然后进入网络列表，点击Create A Network按钮创建一个网络. image 下方列表中会出现一个网络ID，点击网络ID进入即可这个网络的设置界面。 image 记住这个网络ID，如图中为a09acf0233953bab ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:2:1","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"2.2 设置网络 setting image 设置网段 这里随便选一个，也可以保持默认。 如下图中，内网网段为172.22.0.0/16 image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:2:2","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"三、加入网络 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:3:0","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"安装ZeroTier软件 安卓平台建议使用：ZerotierFix 其他平台直接从官网下载 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:3:1","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"3.1 Windows 右键点击ZeroTier托盘图标——Join New Networdk——输入2.1中你获取的网络ID。本文中是a09acf0233953bab。点击Join加入网络。 image 回到网络设置网页，可以看到Members多了一个成员。 勾选权限，设置一个名字，便于区分。 image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:3:2","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"3.2 Linux——Ubuntu 1.安装 输入以下命令在ubuntu中安装zerotier： curl -s https://install.zerotier.com | sudo bash ## 设置开机自启 sudo systemctl enable zerotier-one ## 启动服务 sudo systemctl start zerotier-one 卸载命令： sudo dpkg -P zerotier-one sudo rm -rf /var/lib/zerotier-one/ 2.加入网络 运行以下命令并将\u003cNETWORK-ID\u003e替换为网络ID： sudo zerotier-cli join \u003cNETWORK-ID\u003e 本文中即为： sudo zerotier-cli join a09acf0233953bab 如果连接成功，应打印200 join OK输出。 同理，回到网络设置网页，可以看到Members多了一个成员。权限打勾，设置一个名字，便于区分。 记录下主机A的内网IP。本文中为172.22.0.214。 image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:3:3","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"四、远程连接 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:4:0","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"1.确认网络权限 当你把所有设备都连接到网络中，记得将网络访问权限设置为Private，以增强安全性。 image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:4:1","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"2.远程连接 以Windows连接Ubuntu为例，双方都已启动ZeroTier并加入同一个网络。 直接ssh主机A的内网IP即可： image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:4:2","tags":["VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["git","hugo"],"content":"使用 Hugo 和 Cloudflare Pages 配置博客，自定义域名并启用SSL，还可以白嫖Cloudflare的CDN。","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"前言 如果懒得使用 Github Pages 以及配置 Github Action，又想用自定义域名和 cdn 加速访问博客，那么 hugo + Cloudflare Pages 绝对是不二之选。 准备工作： 参考 Windows 下使用 hugo 和 Github Pages 配置博客，从头开始配置，一直到完成 创建 blog 仓库。 ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:1:0","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"1.设置 Cloudflare Pages ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:2:0","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"1.1 新建 Pages 登录 cloudflare，点击左侧的Workers和Pages，选择Pages——连接到 Git image.png 允许 cloudflare 访问 blog 仓库，选择这个仓库开始设置。 image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:2:1","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"1.2 设置构建环境 项目名称：随便写，之后会分配给你一个[项目名称].pages.dev。我这里就是 leev.pages.dev 生产分支：一般默认选择 main 框架预设：hugo 环境变量 设置 hugo 版本，设置成当前最新版本。我这里是：HUGO_VERSION=0.120.3 开启 hugo 扩展功能，extend=true image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:2:2","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"1.3 部署成功 通过[项目名称].pages.dev访问站点 image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:2:3","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"2.设置域名 ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:3:0","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"2.1 首先自行添加个人域名 image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:3:1","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"2.2 绑定域名 进入构建好的 Pages image.png 自定义域——设置自定义域 image.png 添加自定义域。可以设置一级或二级域名，这里我直接用了一级域名 image.png image.png 然后进入 Pages，绑定域名。 image 等待片刻，DNS 解析生效 image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:3:2","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"成果展示 现在可以直接通过自定义域名访问博客了，而且自动有 SSL。 例如现在就可以通过 https://haoyep.com/ 来访问云吱的小站啦~ image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:4:0","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"总结 以上整个环境部署好之后，接下来的常用命令就是以下几个： 站点目录下，新建文章，执行： hugo new posts/文章名.md 使用VScode编辑文章内容或修改，包括修改主题之类的。在本地进行调试: hugo serve -D 修改完成，确定要上传到 GitHub 上后，站点目录下执行： hugo 进行编译，没错误的话修改的内容就顺利同步到public下了，然后执行提交命令： git add . git commit -m \"随便写点提交信息\" git push 之后 Cloudflare 就会自动拉取、构建网站。 ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:5:0","tags":["git","hugo"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["git","hugo"],"content":"本文主要记录了如何引入 giscus 为博客添加评论功能。用户登陆Github账号后即可评论文章。","date":"2023-11-08","objectID":"/posts/hugo-add-component/","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["git","hugo"],"content":"本文主要记录了如何引入 giscus 为博客添加评论功能。用户登陆Github账号后即可评论文章。 参考知乎 Hugo 的 LoveIt 主题添加 Giscus 评论：Giscus 是一个由 Github Discussions 驱动的评论系统，无需自己单独配置，直接白嫖 Github 的资源即可，而且 UI 和功能都十分地合适我，配合 LoveIt 的配置还可以做到十分美观。 ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:0:0","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["git","hugo"],"content":"配置 Github 仓库 进入 Github Pages 仓库，找到Settings -\u003e General -\u003e Features -\u003e Discussions 勾选，为仓库启动 Discussions 功能 image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:1:0","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["git","hugo"],"content":"安装 Giscus 点击这里，我们将会看到下面的界面，我们点击Install image.png 点击安装后，依次选择Only select repositories——Select repositories——选择 Github Pages 仓库。点击Install安装。 image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:2:0","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["git","hugo"],"content":"配置 Giscus 接下来，我们只需到 Giscus 官网获取配置信息，然后将配置信息填到 Hugo 的配置文件中即可。但是由于主题的不同，所以配置文件的填写也不同，这里以 LoveIt 为例。 ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:3:0","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["git","hugo"],"content":"来到 Giscus 官网 仓库：填写 Github Pages 仓库名 页面 ↔️ discussion 映射关系：Discussion 的标题包含页面的 pathname Discussion 分类：Announcements image.png 其他选项默认。往下滑，找到配置文件。记下data-repo，data-repo-id，data-category，data-category-id，data-mapping这几个值。 image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:3:1","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["git","hugo"],"content":"修改 Hugo 配置 使用 vscode 打开 blog 仓库的本地项目文件夹，修改hugo.toml。在[params]——[params.page]处添加评论功能： [params.page.comment] enable = true # giscus comment 评论系统设置 (https://giscus.app/zh-CN) [params.page.comment.giscus] # 你可以参考官方文档来使用下列配置 enable = true repo = \"leegical/leegical.github.io\" repoId = \"R_kxxxx\" category = \"Announcements\" categoryId = \"DIC_kxxxx\" # 为空时自动适配当前主题 i18n 配置 lang = \"\" mapping = \"pathname\" reactionsEnabled = \"1\" emitMetadata = \"0\" inputPosition = \"bottom\" lazyLoading = false lightTheme = \"light\" darkTheme = \"dark\" image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:3:2","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["git","hugo"],"content":"提交更改 git add . git commit -m \"add comment func\" git push 稍等片刻，Github Action 会自动更改。 用户登录 Github 后即可评论，效果图如下： image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:3:3","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["git","hugo"],"content":"前提 默认本地已安装了 Git、VSCode。 ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:1:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"hugo 配置 ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:2:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"1. 安装 Hugo 推荐使用 Hugo extended 版本 预构建的二进制文件 访问最新版本页面，然后向下滚动到Assets部分。选择对应平台下载。 image.png 解压到某个目录，然后将该目录添加到环境变量中： image.png 通过包管理器（Windows） Chocolatey Chocolatey 是一个免费的开源 Windows 包管理器。这将安装 Hugo 的扩展版本： choco install hugo-extended Scoop Scoop 是适用于 Windows 的免费开源包管理器。这将安装 Hugo 的扩展版本： scoop install hugo-extended Winget Winget是Microsoft的官方免费开源Windows包管理器。这将安装 Hugo 的扩展版本： winget install Hugo.Hugo.Extended ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:2:1","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"2.创建 Hugo 网站 通过上述操作安装 hugo 程序后，就可以通过 hugo new site 命令进行网站创建、配置与本地调试了。 选择一个本地文件夹作为根目录，右键——Git Bash Here，输入下面的命令 hugo new site \u003csite-name\u003e image.png 注：后续命令未经说明，均在 Git Bash 中的 E:\\Workspace\\blog 目录下运行 ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:2:2","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"3.主题 3.1 安装 推荐使用 LoveIt 主题。 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 3.2 基础配置 用VScode打开E:\\Workspace\\blog文件夹，用下面的内容覆盖hugo.toml文件。并自行修改baseURL和title。 其中，baseURL为你的github账户名.github.io baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false image.png 3.4 修改文章前缀模板 在每篇 markdown 文章最前面可以用一部分注释来告诉LoveIt主题，这篇文章的属性，譬如文章标签、分类、是否为草稿等。 详细可参考 LoveIt 官方文档 用下面的内容覆盖archetypes/default.md文件。 注意：实际使用的时候要把摘要的斜杠去掉 +++ title = \"{{ replace .Name \"-\" \" \" | title }}\" # 副标题 subtitle = \"\" # description-\u003e需要自己编写的文章描述，是搜索引擎呈现在搜索结果链接下方的网页简介，建议设置 description = \"\" date = {{ .Date }} lastmod = {{ .Date }} draft = false # 文章的标签 tags = [] # 文章所属的类别 categories = [] # 如果设为 true, 这篇文章将不会显示在主页上 hiddenFromHomePage = false # 如果设为 true, 这篇文章将不会显示在搜索结果中 hiddenFromSearch = false # 文章的特色图片 featuredImage = \"\" # 用在主页预览的文章特色图片 featuredImagePreview = \"\" license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' +++ 此处内容将会出现在摘要（summary）里 \u003c!--\\more--\u003e # 此处的“\\”用于转义，否则无法正常显示，实际使用须删去。 此处开始为正文 文章前缀模板 ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:2:3","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"4.创建你的第一篇文章 以下是创建新文章的命令： hugo new posts/文章标题.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数。 你可以在VScode中随意编辑文章。 image.png ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:2:4","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"5.本地调试 hugo serve image.png 浏览器中打开 http://localhost:1313/，就能看到网站效果。 image.png ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:2:5","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"Github ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:3:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"1.在 Windows 上创建 SSH 密钥并将其添加到 GitHub Windows 端生成 SSH 密钥 使用 Git Bash 或命令行打开终端窗口，输入以下命令。记得把your_email@example.com改成你自己的邮箱地址。 ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 按照提示键入您想要保存密钥的文件名和路径，或使用默认设置。 f787fdcf066f2d0b29903ca7c7b256c.png 接下来，系统将生成一个随机字符串作为密钥密码。此处可以选用默认密码以便于不需要输入密码进行 SSH 登录。进入生成密钥的文件夹，查看密钥： deb3195730865e730b1eae75c73eb74.png 添加到 GitHub 登录到 GitHub 账户，并转到“Settings”（设置）中的“SSH and GPG keys”（SSH 和 GPG 密钥）页面。 点击“New SSH key”（新建 SSH 密钥），填写标题和密钥的内容。 8dbbc792ad52ef00645804d345f70c5.png 打开id_rsa.pub公钥文件 (即你在生成的时候保存的文件) ，将其内容复制到 GitHub 的 “Key” 字段中。 最后，点击“Add SSH key” （添加 SSH 密钥），完成密钥添加。 f37b5f0d629c09d20904268fd3da2c8.png ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:3:1","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"2.创建 blog 仓库 用于存储博客源文件，也就是刚才的本地项目文件。 在 GitHub 网站上登录你的账号，然后点击页面右上角的加号图标，选择 “New repository”（新建仓库）。 在 “Initialize this repository with”（使用以下方式初始化仓库）部分，选择 “Add a README file”（添加一个 README 文件）选项。 暂存并提交现有文件 git add . git commit -m \"init blog files\" 点击 “Create repository”（创建仓库）按钮，完成 GitHub 仓库的创建。 image.png 将本地仓库与远程 GitHub 仓库关联起来。在项目目录中打开 Git Bash，执行以下命令，将 \u003cremote-url\u003e 替换为你的 GitHub 仓库的远程 URL： git remote add origin \u003cremote-url\u003e 例如： git remote add origin https://github.com/your-username/your-repository.git 将本地代码推送到远程仓库的 main 分支。执行以下命令： git push -u origin main 这将把本地的代码推送到远程仓库的 main 分支，并将其设置为默认上游分支。 ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:3:2","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"3.创建 Github Pages 仓库 用于实际展示博客。 创建新仓库 image.png Repository name 这里一定要填 [你的github账号].github.io。你的github账号必须小写字母。仓库可见性设为Public。选择“使用 README 初始化此存储库”。 image.png ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:3:3","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"4.上传页面 4.1 进入项目根目录，执行： hugo 执行后，站点根目录下会生成一个 public 文件夹，该文件下的内容即 Hugo 生成的整个静态网站。每次更新内容后，将 pubilc 目录里所有文件 push 到 GitHub Pages 所在的仓库即可。 4.2 上传代码至 master 首次使用的时候要执行以下命令： cd public git init git remote add origin https://github.com/leegical/leegical.github.io.git # 将本地目录链接到远程服务器的代码仓库 git add . git commit -m \"[介绍，随便写点什么，比如日期]\" git push -u origin master 4.3 更改 Pages 展示分支 进入 Github Pages 仓库的Setting-Pages，把Branch修改为master，点击 save。 image.png 稍等几分钟即可通过[你的github账号].github.io来访问博客站点了，和hugo serve -D本地调试完全一致。 ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:3:4","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"5.Github Action 自动发布 通过上述命令我们可以手动发布我们的静态文件，但还是有以下弊端： 发布步骤还是比较繁琐，本地调试后还需要切换到 public/ 目录进行上传 无法对博客 .md 源文件进行备份与版本管理 可以通过官方提供的 GitHub Action 进行 CI 自动发布。 5.1 增加 action 配置文件 回到 blog 仓库的本地文件夹，新增`.github/workflows/deploy.yml`` mkdir .github mkdir .github/workflows touch .github/workflows/deploy.yml image.png 用 vscode 编辑 deploy.yml 的内容，参考如下： name: deploy on: push: pull_request: workflow_dispatch: schedule: # Runs everyday at 0:00 AM - cron: \"0 0 * * *\" jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \"latest\" extended: true - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: leegical/leegical.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 注意：EXTERNAL_REPOSITORY要修改为 Github Pages 的链接 image.png 提交变更到 Github： git add . git commit -m \"add action config\" git push image.png 5.2 设置 action 变量 进入 Github tokens ，点击Generate new token——Generate new token (classic) image.png Note：随便写 Expiration：No expiration Select scopes：只勾选 repo image.png 拉到最下面，点击生成。 image.png 注意生成的 token 只会显示这一次，形如 ghp_xxxxxxxxxx，点击复制。 回到 blog 仓库——Setting，新建仓库密钥 image.png Name：PERSONAL_TOKEN Secret：填刚才复制的密钥 image.png ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:3:5","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"总结 以上整个环境部署好之后，接下来的常用命令就是以下几个： 站点目录下，新建文章，执行： hugo new posts/文章名.md 使用VScode编辑文章内容或修改，包括修改主题之类的。在本地进行调试: hugo serve -D 修改完成，确定要上传到GitHub上后，站点目录下执行： hugo 进行编译，没错误的话修改的内容就顺利同步到public下了，然后执行提交命令： git add . git commit -m \"随便写点提交信息\" git push 稍等片刻，github action执行完毕，页面就会更新了。 ","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:4:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["git","hugo"],"content":"选择和配置Hugo主题 在本地项目文件夹static中添加2个方形 png 图片，命名为avatar.png、logo.png，作为网站头像和 logo： image.png 修改hugo.toml文件，参考下面的文件自行修改： baseURL = \"https://leegical.github.io/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"云吱的小站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 是否使用 emoji 代码 enableEmoji = true # 忽略一些构建错误 ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # 作者配置 [author] name = \"云吱\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] [params] # 网站默认主题样式 [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站标题, 用于 Open Graph 和 Twitter Cards title = \"云吱的小站\" # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \"色相事一刹那，光阴里无尽藏\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # 移动端导航栏模式 [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"应是天仙狂醉，乱把白云揉碎\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 10 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"云吱的小站\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"云吱的小站\" # 主页显示的网站副标题 (允许 HTML 格式) subtitle = \"色相事一刹那，光阴里无尽藏\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # Page global config # 文章页面全局配置 [params.page] # whether to hide a page from home page # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # whet","date":"2023-11-07","objectID":"/posts/windows-hugo-blog-github/:5:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"}]