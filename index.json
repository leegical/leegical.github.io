[{"categories":["技术"],"content":"记录给小白（女朋友）重装系统的流程，包括重装系统使用的工具和进入新系统后的软件配置。","date":"2024-05-14","objectID":"/posts/reinstall-windows/","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"本文主要是记录给小白（女朋友）重装系统的流程，包括重装系统使用的工具和进入新系统后的软件配置。 一、重装系统 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:0:0","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"1 1.1 启动盘工具 ventoy可以满足一个U盘安装多个系统，下载地址 ventoy 插入U盘，打开Ventoy2Disk.exe，配置选项——分区类型，勾选GPT。 点击安装，注意此步骤会清空U盘全部数据。如果U盘已经安装过ventoy，则点击升级，升级操作不会清空U盘数据。 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:1:0","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"2 1.2 系统镜像文件 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:2:0","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"2.1 Windows 建议直接参考教程从微软官网下载，Windows11同理。原理是更改浏览器为非Windows UA以获取下载直链。注意，下载Windows 10/11 64bit版本，不要下载家庭中文版。 注意事项 建议选择专业工作站版本 条件允许的情况下，可以将Windows安装到200GB以上的分区（需提前清空该分区所有数据）。毕竟小白不懂，只会狂点下一步把软件都安装到C盘。 Windows无法安装到这个磁盘，选中的磁盘采用GPT分区形式 弹出这个提示，主要是电脑硬盘格式为GPT分区表，而U盘启动引导方式为“Legacy”模式，导致了开机引导方式和磁盘数据结构不匹配导致的问题！正确的开机引导方式和磁盘数据结构：Legacy引导对应的是MBR分区；UEFI引导对应的是GPT分区。 推荐的解决方法：将U盘启动UEFI模式 将电脑重启，重新选择U盘启动模式，在BIOS界面选择“UEFI：”开头的U盘名称。 同理，如果电脑硬盘格式为MBR，那么在BIOS界面选择不带“UEFI：”开头的U盘启动。 安装系统时建议使用本地账号登陆，账号名设为全英文。进入系统后再去设置里登录自己的微软账号 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:2:1","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"2.2 Ubuntu 22.04 LTS 官网 南京大学镜像 清华大学镜像 北邮镜像 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:2:2","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"2.3 Ubuntu 20.04 LTS 官网 南京大学镜像 清华大学镜像 北邮镜像 注意事项 Ubuntu分区没必要那么复杂，完全可以直接all in在一个硬盘分区上。总之，按需调整各逻辑分区对应的硬盘分区位置、大小。 二、Windows 软件设置 当给其他人安装软件时，切记以人为本，放下技术优越性，不要搞一些好用但需要折腾、破解的软件。小白需要的是稳定易维护，版本升级简单。 下面提到的软件都以易更新为主（微软商店、联想软件管家），部分特殊软件也保证可以锁死版本使用。 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:2:3","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"1 2.1 系统相关 系统激活：淘宝买激活码或者使用HEU KMS Activator，可能会报毒，关闭Windows安全保护后再运行，或安装火绒后再运行。用完即删 驱动：驱动天使、驱动总裁 用完即卸载 软件卸载工具：geek：单文件、免费、可以自动删除注册表等痕迹 微软常用运行库合集（果核版本）。用完即删 DirectX修复工具（果核版本），启用扩展，强力修复C++。用完即删 多软件音量调节：EarTrumpet 剪贴板增强：Ditto Clipboard 多显示器亮度调节工具：Twinkle Tray 系统安全：火绒，下载完整版，开启广告拦截。安静无打扰 也可以直接下载联想电脑管家，相当于集成了火绒、驱动管理、软件商店，还是很不错的。 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:3:0","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"2 2.2 办公类 Office：Office Tool Plus 选择包含框架的版本。用完即删 产品Microsoft365 64位，选择Word、Excel、PowerPoint，如有需求可选安装OneNote、Visio等。先清除所有许可证，再安装激活Office Mondo 2016 - 批量版许可证。kms地址网上随便搜索填一个，如kms.loli.beer、kms.03k.org，端口不用填。 PDF：Adobe Acrobat DC @vposy 思维导图：百度脑图桌面离线版、可能需要科学上网drawio、支持正版xmind ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:4:0","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"3 2.3 工具类 软件商店：联想应用商店 解压缩：NanaZip（微软商店） 图片：2345看图王 果核版，第一次使用，请使用绿化卸载.exe进行绿化 输入法：搜狗输入法 云联想、细胞词库仍然是天花板级别，广告就交给火绒拦截吧 截图：Snipaste 浏览器：edge（关闭后台运行、硬件加速）登录微软账号同步扩展、密码，或Firefox、360极速浏览器X 不建议安装Chrome，除非会科学上网同步数据 浏览器扩展推荐：uBlock Origin 去广告、Awesome Screenshot 截图录屏、Infinity 新标签页 (Pro)、沙拉查词、学术需求：easyScholar 通讯：微信、QQ。不得不用，在联想应用商店里直接下载 桌面管理：腾讯桌面管理：去除快捷方式小箭头、替代everthing、关闭壁纸 腾讯桌面管理 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:5:0","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"4 2.4 音视频（可选安装） 音乐 洛雪音乐，配合六音音源 Listen 1，全平台免费听歌 本地音乐播放器：MusicPlayer2 播放器：potplayer Potplayer无边框设置： 选项——基本——默认皮肤，勾选视频下自动隐藏、全屏时防止遮盖；进阶皮肤，方式设置为使用 Direct3D 9 Potplayer无边框设置 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:6:0","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["技术"],"content":"5 2.5 下载工具（可选安装） IDM+迅雷组合秒杀一切。下方都是特殊版本，没事别升级 IDM：有浏览器扩展，资源嗅探能力最强，下载速度也是最快。但没法下种子 NDM：IDM平替，免费，没汉化 Motrix：颜值高，能下种子。但有时会没速度 ","date":"2024-05-14","objectID":"/posts/reinstall-windows/:7:0","tags":["Windows"],"title":"重装Windows系统记录","uri":"/posts/reinstall-windows/"},{"categories":["科研"],"content":"如何在 Word 中使用 Zotero 插入参考文献，并设定东北大学要求的参考文献引用列表格式。","date":"2024-04-01","objectID":"/posts/word-zotero-citation/","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"本文介绍了如何在 Word 中使用 Zotero 插入参考文献，并设定东北大学要求的参考文献引用列表格式。 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:0:0","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"1 准备工作 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:1:0","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"1.1 参考文献引用格式 安装 GB/T 7714-2015 参考文献引用格式。 1.1.1 Zotero 官方7714样式（不推荐） 注意 此官方格式存在一些问题，如不能区分中英文文献，导致引用英文文献也是“等”，而不是“et al”。因此并不推荐。 打开 Zotero，点击编辑-\u003e首选项-\u003e引用 在样式中点击获取更多样式 搜索7714即可安装国标引用样式。注意有1987、2005和2015三个时间，note、author-date 和 numeric 三个格式，鼠标悬停即可预览样式 安装Zotero 官方7714样式 1.1.2 比较贴近 NEU 要求的7714样式 Github 上的Chinese-STD-GB-T-7714-related-csl仓库（或Gitee 镜像仓库）提供7714 2015的官方样式及众多修改版，其中002gb样式比较符合东北大学的要求，除了网络文献的引用顺序有点差异。 002gb样式 点击 [Github | Gitee ]下载引用格式文件 打开 Zotero，依次进入编辑-\u003e首选项-\u003e引用 点击+号添加样式。选中已下载的002 csl 样式，打开。 导入样式 会提示***.csl不是一个有效的 CSL 1.0.2 样式文件，你可能不能和Zotero一起正常工作，不用管，点击 OK 继续导入。 不管提示，继续导入 点击 OK 保存退出首选项。然后重新打开编辑-\u003e首选项-\u003e导出—\u003e条目格式，设置成刚才导入的7714样式 设置默认导出样式 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:1:1","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"1.2 在 Word 中安装 Zotero 插件 关闭所有已经打开的 Word 打开 Zotero，点击编辑-\u003e首选项-\u003e引用 在文档编辑软件中点击安装加载项 Microsoft Word，记得勾选使用经典版\"添加引注\" 安装加载项 Microsoft Word ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:1:2","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"2 Zotero Word 插件选项卡 Zotero Word 插件选项卡 一般情况下，Zotero 安装时会安装 Zotero Word 插件，其会在 Microsoft Word 里添加一个 Zotero 选项卡。如果你的 Word 里没有 Zotero 选项卡，请参见 故障排除 | 安装 Zotero 的 Word 插件 。 Zotero 选项卡包含以下图标： 名称 图标 描述 添加/编辑引注 插入引文 在光标位置添加新引注或编辑文档中的现有引注。 添加/编辑参考文献表 添加参考文献表 在光标位置插入参考文献表或编辑现有书目。 添加笔记 添加笔记 在光标当前位置插入笔记。请注意，此功能不常用，点击后会出现黄色插入框。如果不小心点开了，可以用键盘上的 Esc 键关闭黄色插入框。 文档首选项 文档首选项 打开“文档首选项”窗口，例如更改引文样式。 刷新 刷新 立即刷新所有引注和参考文献表，更新 Zotero 库中已更改的项目元数据。 取消链接引注 unlink 通过删除域代码来取消文档中 Zotero 引文的链接。这可以防止引文和书目的任何进一步自动更新。请注意，删除域代码是不可逆的，通常只能在文档的最终副本中完成。 其中，文档首选项窗口允许您设置以下针对该文档的设置： 引文样式：一般情况下，你只需要修改这一项，其余设置均保持默认即可。 设置引注和参考文献表的格式的语言。 对于基于注释的样式，例如“China National Standard GB/T 7714-2015（note，Chinese）”，引文是插入为脚注还或尾注。脚注和尾注的样式和格式由 Word（而不是 Zotero）控制。 将引文存储为字段还是书签。默认为“字段”。除非您需要使用 LibreOffice 与同事协作，否则应始终选择“字段”。 对于缩写期刊标题的样式（例如，“Nature”），是否使用 MEDLINE 缩写列表来缩写标题。如果选择此选项（默认值），则 Zotero 中“ ”字段的内容将被忽略。 是否自动更新引注和参考文献表：一般情况下开启即可。当文档中引文非常多，每次更新都会卡顿时，可以关闭此功能，添加一部分或最终手动进行更新。 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:2:0","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"3 插入参考文献 注意：插入参考文献时要保证Zotero在后台运行 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:3:0","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"3.1 设置默认引用格式 打开要插入参考文献的 Word，点击 Zotero 选项卡-\u003eDocument Reference，设置参考文献默认引用格式为 GB/T 7714-2015 设置参考文献默认引用格式为GB/T 7714-2015 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:3:1","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"3.2 插入单篇文献 在 Word 正文中点击要插入参考文献的位置，然后在Zotero 选项卡中点击Add/Edit Citation，从 Zotero 中选择要插入的参考文献，点击OK即可插入。 插入单篇参考文献 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:3:2","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"3.3 插入参考文献引用列表 在 Word 正文中点击要插入参考文献引用列表的位置，然后在Zotero 选项卡中点击Add/Edit Bibliography，即可出现参考文献引用列表。 插入参考文献引用列表 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:3:3","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"3.4 插入多篇参考文献 只需要在插入参考文献时，选择多重来源，逐个添加参考文献到右边侧栏，然后点击OK即可。 插入多篇参考文献 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:3:4","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"3.5 删除或更换多重来源 选中 Word 中多重引用的位置，在Zotero 选项卡中点击Add/Edit Citation。 左箭头：删除其中一个文献；右箭头：添加一个文献。 上、下箭头：对引文重新排序。 删除或更换多重来源 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:3:5","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"4 设置参考文献格式 Zotero 插入的参考文献引用列表，默认使用了 Word 中的书目样式。因此，只需要修改书目样式为学校要求的参考文献格式，就能保证刷新后不改变，且格式与学校要求保持一致。 NEU 硕士毕业论文参考文献的格式要求如下： NEU硕士毕业论文参考文献格式要求 将书目样式修改为如上格式后，再次插入或刷新参考文献，格式就会保持此样式不变。 也可以从 NEU Zotero 参考文献格式 Word分享中下载已经改好样式的 Word 文件。 NEU-zotero-citation ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:4:0","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"5 注意事项 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:5:0","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"5.1 等与 et al 如果英文文献作者超过3个，但显示为中文的等，而不是英文 et al。这是没有设置文献语言的原因。 英文但显示等 需要手动将英文文献信息中的 语言 字段修改为 en。同理，将中文文献的 语言 字段修改为 zh-CN。 修改文献语言 你也可以使用茉莉花插件实现自动识别语言。只需要全选文献——右键——小工具——Auto:智能识别语言，就可以自动更新文献语言。 Auto:智能识别语言 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:5:1","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"5.2 文献名大小写 有些期刊或出版社（如 ACS）导出的文章题目（Title）是每个实词的首字母是大写，如： Measurement-Based Probabilistic Timing Analysis for Multi-path Programs 但一些杂志或学校要求是句子（Sentence）格式，即只是题目的首字母大写（缩写除外，都是大写），如： Measurement-based probabilistic timing analysis for multi-path programs 修改方法有两种。 5.2.1 单一文献手动修改 选中文章，然后在右侧文章信息 信息/Info 中 标题/Title 字段处右击，选择 句首大写/Transform Text-Sentence case，然后再把缩略语等需要大写的手动修改一下。 手动句首大写 5.2.2 批量修改 批量转为句首字母大写，即 Sentence 模式的实现方法参考如下链接： Zotero批量文章题目大小写转为首字母大写的方法（含视频） https://zhuanlan.zhihu.com/p/283889592 操作有风险，建议先备份库再进行下面的操作。 选中需要转换的文献，本例中为4条全选。 在Zotero中依次点击：Zotero\u003eTools\u003eDeveloper\u003eRun Javascript 运行js 3.在弹出的对话框中将以下代码复制进去： zoteroPane = Zotero.getActiveZoteroPane(); items = zoteroPane.getSelectedItems(); var result = \"\"; for (item of items) { var title = item.getField('title'); result += \" \" + title + \"\\n\"; var new_title = title.replace(/\\b([A-Z][a-z0-9]+|A)\\b/g, function (x) { return x.toLowerCase(); }); new_title = new_title.replace(/(^|\\?\\s*)[a-z]/, function (x) { return x.toUpperCase(); }); result += \"-\u003e \" + new_title + \"\\n\\n\"; // Do it at your own risk item.setField('title', new_title); await item.saveTx(); } return result; 点击Run，右侧会显示题目的修改情况。 Run js 关闭此窗口，则在Zotero主窗口发现已经修改完成，都成为句首字母大写，最好再核实一下，如果有不正确的，手动再修改一下。 句首字母大写效果 ","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:5:2","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["科研"],"content":"5.3 交叉引用 Zotero 在 Word 中参考文献的上标并不是超链接/交叉引用格式，因此无法点击上标跳转到具体参考文献列表条目。可以通过 Word 中的宏实现交叉引用。 参考教程：Zotero 和 Word 参考文献与文末引用条目的超链接设置 打开Word -\u003e 视图 -\u003e 宏，选择查看宏 查看宏 输入宏名：ZoteroLinkCitation，点击创建宏 创建宏ZoteroLinkCitation 将代码全部替换为： Public Sub ZoteroLinkCitation() ' get selected area (if applicable) Dim nStart\u0026, nEnd\u0026 nStart = Selection.Start nEnd = Selection.End ' toggle screen updating Application.ScreenUpdating = False ' define variables Dim title As String Dim titleAnchor As String Dim style As String Dim fieldCode As String Dim numOrYear As String Dim pos\u0026, n1\u0026, n2\u0026, n3\u0026 ActiveWindow.View.ShowFieldCodes = True Selection.Find.ClearFormatting ' find the Zotero bibliography With Selection.Find .Text = \"^d ADDIN ZOTERO_BIBL\" .Replacement.Text = \"\" .Forward = True .Wrap = wdFindContinue .Format = False .MatchCase = False .MatchWholeWord = False .MatchWildcards = False .MatchSoundsLike = False .MatchAllWordForms = False End With Selection.Find.Execute ' add bookmark for the Zotero bibliography With ActiveDocument.Bookmarks .Add Range:=Selection.Range, name:=\"Zotero_Bibliography\" .DefaultSorting = wdSortByName .ShowHidden = True End With ' loop through each field in the document For Each aField In ActiveDocument.Fields ' check if the field is a Zotero in-text reference '################################################## If InStr(aField.Code, \"ADDIN ZOTERO_ITEM\") \u003e 0 Then fieldCode = aField.Code '############# ' Prepare ' Plain citation== Format of Textfield shown ' must be in Brackets Dim plain_Cit As String plCitStrBeg = \"\"\"plainCitation\"\":\"\"[\" plCitStrEnd = \"]\"\"\" n1 = InStr(fieldCode, plCitStrBeg) n1 = n1 + Len(plCitStrBeg) n2 = InStr(Mid(fieldCode, n1, Len(fieldCode) - n1), plCitStrEnd) - 1 + n1 plain_Cit = Mid$(fieldCode, n1 - 1, n2 - n1 + 2) 'Reference 'as shown' in word as a string 'Title array in fieldCode (all referenced Titles within this field) Dim array_RefTitle(32) As String i = 0 Do While InStr(fieldCode, \"\"\"title\"\":\"\"\") \u003e 0 n1 = InStr(fieldCode, \"\"\"title\"\":\"\"\") + Len(\"\"\"title\"\":\"\"\") n2 = InStr(Mid(fieldCode, n1, Len(fieldCode) - n1), \"\"\",\"\"\") - 1 + n1 If n2 \u003c n1 Then 'Exception the type 'Article' n2 = InStr(Mid(fieldCode, n1, Len(fieldCode) - n1), \"}\") - 1 + n1 - 1 End If array_RefTitle(i) = Mid(fieldCode, n1, n2 - n1) fieldCode = Mid(fieldCode, n2 + 1, Len(fieldCode) - n2 - 1) i = i + 1 Loop Titles_in_Cit = i 'Number array with References shown in PlainCit 'Numer is equal or less than Titels, depending on the type '[3], [8]-[10]; [2]-[4]; [2], [4], [5] ' All citations have to be in Brackets each! [3], [8] not [3, 8] ' This doesnt work otherwise! ' --\u003e treatment of other delimiters could be implemented here Dim RefNumber(32) As String i = 0 Do While (InStr(plain_Cit, \"]\") Or InStr(plain_Cit, \"[\")) \u003e 0 n1 = InStr(plain_Cit, \"[\") n2 = InStr(plain_Cit, \"]\") RefNumber(i) = Mid(plain_Cit, n1 + 1, n2 - (n1 + 1)) plain_Cit = Mid(plain_Cit, n2 + 1, Len(plain_Cit) - (n2 + 1) + 1) i = i + 1 Loop Refs_in_Cit = i 'treat only the shown references (skip the rest) '[3], [8]-[10] --\u003e skip [9] 'Order of titles given from fieldcode, not checked! If Titles_in_Cit \u003e Refs_in_Cit Then array_RefTitle(Refs_in_Cit - 1) = array_RefTitle(Titles_in_Cit - 1) i = 1 Do While Refs_in_Cit + i \u003c= Titles_in_Cit array_RefTitle(Refs_in_Cit + i - 1) = \"\" i = i + 1 Loop End If '############# 'Make the links For Refs = 0 To Refs_in_Cit - 1 Step 1 title = array_RefTitle(Refs) array_RefTitle(Refs) = \"\" ' make title a valid bookmark name titleAnchor = title titleAnchor = MakeValidBMName(titleAnchor) ActiveWindow.View.ShowFieldCodes = False Selection.GoTo What:=wdGoToBookmark, name:=\"Zotero_Bibliography\" '' locate the corresponding reference in the bibliography '' by searching for its title Selection.Find.ClearFormatting With Selection.Find .Text = Left(title, 255) .Replacement.Text = \"\" .Forward = True .Wrap = wdFindContinue .Format = False .MatchCase = False .MatchWholeWord = False .MatchWildcards = False .MatchSoundsLike = False .MatchAllWordForms = False End With Selectio","date":"2024-04-01","objectID":"/posts/word-zotero-citation/:5:3","tags":["生产力","zotero"],"title":"在 Word 中使用 Zotero 插入参考文献","uri":"/posts/word-zotero-citation/"},{"categories":["Linux"],"content":"本文记录了Ubuntu 22.04 LTS 64位系统安装 clang10 版本的过程。","date":"2024-01-07","objectID":"/posts/ubuntu22-install-clang10/","tags":["Linux","clang"],"title":"Ubuntu 22.04 LTS 64位系统安装 clang10 版本","uri":"/posts/ubuntu22-install-clang10/"},{"categories":["Linux"],"content":"本文记录了Ubuntu 22.04 LTS 64位系统安装 clang10 版本的过程。 ","date":"2024-01-07","objectID":"/posts/ubuntu22-install-clang10/:0:0","tags":["Linux","clang"],"title":"Ubuntu 22.04 LTS 64位系统安装 clang10 版本","uri":"/posts/ubuntu22-install-clang10/"},{"categories":["Linux"],"content":"1 安装 clang10 编辑 apt 源文件。 sudo nano /etc/apt/sources.list 添加以下内容： # clang 9/10 # i386 not available deb http://apt.llvm.org/focal/ llvm-toolchain-focal main deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal main # 9 deb http://apt.llvm.org/focal/ llvm-toolchain-focal-9 main deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-9 main # 10 deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main 添加clang9/10源 安装 clang10 # 先添加key wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - # 更新源 sudo apt update # 安装 clang10 sudo apt-get install clang-10 llvm-10-dev llvm-10-tools -y ","date":"2024-01-07","objectID":"/posts/ubuntu22-install-clang10/:1:0","tags":["Linux","clang"],"title":"Ubuntu 22.04 LTS 64位系统安装 clang10 版本","uri":"/posts/ubuntu22-install-clang10/"},{"categories":["Linux"],"content":"2 切换默认命令版本 安装完成后，默认的命令是clang-10和clang++-10，需要使用update-alternatives来设置成clang和clang++。 首先查看当前 clang 默认版本： clang --version 如图，当前版本是 clang14 clang 默认版本输出 ","date":"2024-01-07","objectID":"/posts/ubuntu22-install-clang10/:2:0","tags":["Linux","clang"],"title":"Ubuntu 22.04 LTS 64位系统安装 clang10 版本","uri":"/posts/ubuntu22-install-clang10/"},{"categories":["Linux"],"content":"2.1 切换成 clang10 sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 1 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-10 切换成 clang10 ","date":"2024-01-07","objectID":"/posts/ubuntu22-install-clang10/:2:1","tags":["Linux","clang"],"title":"Ubuntu 22.04 LTS 64位系统安装 clang10 版本","uri":"/posts/ubuntu22-install-clang10/"},{"categories":["Linux"],"content":"2.2 恢复原有的 clang 版本 这里也给出切换回 clang14的命令： sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 2 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-14 ","date":"2024-01-07","objectID":"/posts/ubuntu22-install-clang10/:2:2","tags":["Linux","clang"],"title":"Ubuntu 22.04 LTS 64位系统安装 clang10 版本","uri":"/posts/ubuntu22-install-clang10/"},{"categories":["技术"],"content":"传统的 bash 功能比较简陋，且不美观。本文基于 Ubuntu22.04 LTS 系统，安装 zsh，并使用 oh-my-zsh 对终端进行美化。Oh My Zsh 是基于 zsh 命令行的一个扩展工具集，提供了丰富的扩展功能。","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"传统的 bash 功能比较简陋，且不美观。本文基于 Ubuntu22.04 LTS 系统，安装 zsh，并使用 oh-my-zsh 对终端进行美化。Oh My Zsh 是基于 zsh 命令行的一个扩展工具集，提供了丰富的扩展功能。 传统的 bash 功能比较简陋，且不美观。本文基于 Ubuntu22.04 LTS 系统，安装 zsh，并使用 oh-my-zsh 对终端进行美化。Oh My Zsh 是基于 zsh 命令行的一个扩展工具集，提供了丰富的扩展功能。 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:0:0","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"1 环境配置 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:1:0","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"1.1 安装基本工具 # 更新软件源 sudo apt update \u0026\u0026 sudo apt upgrade -y # 安装 zsh git curl sudo apt install zsh git curl -y 设置默认终端为 zsh（注意：不要使用 sudo）。 chsh -s /bin/zsh ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:1:1","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"1.2 安装 oh-my-zsh 官网：http://ohmyz.sh/。 安装方式任选一个即可。 Method Command curl sh -c \"$(curl -fsSL https://install.ohmyz.sh/)\" wget sh -c \"$(wget -O- https://install.ohmyz.sh/)\" fetch sh -c \"$(fetch -o - https://install.ohmyz.sh/)\" 国内curl镜像 sh -c \"$(curl -fsSL https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh)\" 国内wget镜像 sh -c \"$(wget -O- https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh)\" 注意：同意使用 Oh-my-zsh 的配置模板覆盖已有的 .zshrc。 安装 oh-my-zsh ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:1:2","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"2 配置主题 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:2:0","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"2.1 自定义主题 sudo wget -O $ZSH_CUSTOM/themes/haoomz.zsh-theme https://cdn.haoyep.com/gh/leegical/Blog_img/zsh/haoomz.zsh-theme 编辑 ~/.zshrc 文件，将 ZSH_THEME 设为 haoomz。当然你也可以设置为其他主题，例如lukerandall、robbyrussell。 nano ~/.zshrc ZSH_THEME=\"haoomz\" source ~/.zshrc 设置ZSH_THEME 效果如下（robbyrussell → haoomz）： haoomz主题 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:2:1","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"2.2 推荐主题 你可以在内置主题样式截图中查看所有 zsh 内置的主题样式和对应的主题名。这些内置主题已经放在 ～/.oh-my-zsh/themes 目录下，不需要再下载。 cd ~/.oh-my-zsh/themes \u0026\u0026 ls zsh 内置的主题样式 2.2.1 powerlevel10k 根据 What’s the best theme for Oh My Zsh? 中的排名，以及自定义化、美观程度，强烈建议使用 powerlevel10k 主题。 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k # 中国用户可以使用 gitee.com 上的官方镜像加速下载 git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k 在 ~/.zshrc 设置 ZSH_THEME=\"powerlevel10k/powerlevel10k\"。接下来，终端会自动引导你配置 powerlevel10k。 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:2:2","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"3 安装插件 oh-my-zsh 已经内置了 git 插件，内置插件可以在 ～/.oh-my-zsh/plugins 中查看，下面介绍一下我常用的插件，更多插件可以在 awesome-zsh-plugins 里查看。 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:3:0","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"3.1 插件推荐 3.1.1 zsh -autosuggestions zsh-autosuggestions 是一个命令提示插件，当你输入命令时，会自动推测你可能需要输入的命令，按下右键可以快速采用建议。效果如下： zsh-autosuggestions自动补全 安装方式：把插件下载到本地的 ~/.oh-my-zsh/custom/plugins 目录。 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 3.1.2 zsh-syntax-highlighting zsh-syntax-highlighting 是一个命令语法校验插件，在输入命令的过程中，若指令不合法，则指令显示为红色，若指令合法就会显示为绿色。效果如下： 命令语法校验 安装方式：把插件下载到本地的 ~/.oh-my-zsh/custom/plugins 目录。 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 3.1.3 z oh-my-zsh 内置了 z 插件。z 是一个文件夹快捷跳转插件，对于曾经跳转过的目录，只需要输入最终目标文件夹名称，就可以快速跳转，避免再输入长串路径，提高切换文件夹的效率。效果如下： 使用z跳转目录 3.1.4 extract oh-my-zsh 内置了 extract 插件。extract 用于解压任何压缩文件，不必根据压缩文件的后缀名来记忆压缩软件。使用 x 命令即可解压文件，效果如下： extract 解压 3.1.5 web-search oh-my-zsh 内置了 web-search 插件。web-search 能让我们在命令行中使用搜索引擎进行搜索。使用搜索引擎关键字+搜索内容 即可自动打开浏览器进行搜索。效果如下： web-search搜索 最后，记得启用所有插件。 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:3:1","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"3.2 启用插件 修改~/.zshrc中插件列表为： plugins=(git zsh-autosuggestions zsh-syntax-highlighting z extract web-search) zsh插件列表 部分插件需要参考插件介绍进行安装。 开启新的 Shell 或执行 source ~/.zshrc，就可以开始体验插件。 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:3:2","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"4 Tips ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:4:0","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"4.1 root 用户 当你配置好登陆用户的 zsh 后，如果使用sudo su命令进入root用户的终端，发现还是默认的bash。建议在root用户的终端下，也安装on my zsh，设置与普通用户不同的主题以便区分，插件可以使用一样的。 root用户的~/.zshrc配置，仅供参考： ZSH_THEME=\"ys\" plugins=(git zsh-autosuggestions zsh-syntax-highlighting z extract web-search) # 或 plugins=(git colored-man-pages colorize cp man command-not-found sudo suse ubuntu archlinux zsh-navigation-tools z extract history-substring-search python zsh-autosuggestions zsh-syntax-highlighting) ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:4:1","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"4.2 配置本地代理 如果你配置了本地代理，并希望终端的 git 等命令使用代理，那么可以在~/.zshrc中添加： # 为 curl wget git 等设置代理 proxy () { export ALL_PROXY=\"socks5://127.0.0.1:1089\" export all_proxy=\"socks5://127.0.0.1:1089\" } # 取消代理 unproxy () { unset ALL_PROXY unset all_proxy } 这里假设本地代理的端口是1089。 使用本地代理命令 以后在使用 git 等命令之前，只需要在终端中输入 proxy 命令，即可使用本地代理。 4.2.1 WSL 配置本地代理 host_ip=$(cat /etc/resolv.conf |grep \"nameserver\" |cut -f 2 -d \" \") # 为 curl wget git npm apt 等设置代理 proxy () { export ALL_PROXY=\"http://$host_ip:10811\" export all_proxy=\"http://$host_ip:10811\" # echo -e \"Acquire::http::Proxy \\\"http://$host_ip:10811\\\";\" | sudo tee -a /etc/apt/apt.conf \u003e /dev/null # echo -e \"Acquire::https::Proxy \\\"http://$host_ip:10811\\\";\" | sudo tee -a /etc/apt/apt.conf \u003e /dev/null } # 取消代理 unproxy () { unset ALL_PROXY unset all_proxy # sudo sed -i -e '/Acquire::http::Proxy/d' /etc/apt/apt.conf # sudo sed -i -e '/Acquire::https::Proxy/d' /etc/apt/apt.conf } 这里假设宿主机局域网 http 代理的端口是10811。 ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:4:2","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"4.3 卸载 Oh My Zsh 终端输入 ： uninstall_oh_my_zsh Are you sure you want to remove Oh My Zsh? [y/N] Y 终端提示信息： Removing ~/.oh-my-zsh Looking for original zsh config... Found ~/.zshrc.pre-oh-my-zsh -- Restoring to ~/.zshrc Found ~/.zshrc -- Renaming to ~/.zshrc.omz-uninstalled-20170820200007 Your original zsh config was restored. Please restart your session. Thanks for trying out Oh My Zsh. It's been uninstalled. ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:4:3","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["技术"],"content":"4.4 手动更新 Oh My Zsh Oh My Zsh 的自动更新提示误触关掉了解决办法 打开终端输入： upgrade_oh_my_zsh ","date":"2024-01-02","objectID":"/posts/zsh-config-oh-my-zsh/:4:4","tags":["生产力","Linux"],"title":"zsh 安装与配置，使用 oh-my-zsh 美化终端","uri":"/posts/zsh-config-oh-my-zsh/"},{"categories":["科研"],"content":"Ubuntu 22.04 LTS 64位系统安装 American Fuzzy Lop (AFL) 2.56b 踩坑记录，使用 QEMU mode 进行简单测试实践。","date":"2023-12-25","objectID":"/posts/afl-install/","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"Ubuntu 22.04 LTS 64位系统安装 American Fuzzy Lop (AFL) 2.56b 踩坑记录，使用 QEMU mode 进行简单测试实践。 ","date":"2023-12-25","objectID":"/posts/afl-install/:0:0","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"1 安装依赖 sudo apt update sudo apt-get install -y cargo \\ python2 \\ cmake \\ g++ \\ git \\ bison \\ libz3-dev \\ ninja-build \\ python3-pip \\ zlib1g-dev pip3 install lit ","date":"2023-12-25","objectID":"/posts/afl-install/:1:0","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"1.1 添加环境变量 Path 编辑终端配置文件。 # bash sudo nano ~/.bashrc # zsh sudo nano ~/zshrc 添加环境变量： export PATH=${HOME}/.local/bin:${PATH} 编辑Path变量 启用配置文件，bash 使用source ~/.bashrc；zsh 使用~/.zshrc。 ","date":"2023-12-25","objectID":"/posts/afl-install/:1:1","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"1.2 设置 Python AFL 使用的是 Python2，Ubuntu22.04 上没有安装。因此需要安装 Python2并将其设置为默认 Python。 sudo ln -s /usr/bin/python2 /usr/bin/python ","date":"2023-12-25","objectID":"/posts/afl-install/:1:2","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"1.3 安装 clang10 参考此文章安装并设置 clang10 为默认版本。 Ubuntu 22.04 LTS 64位系统安装 clang10 版本 https://www.haoyep.com/posts/ubuntu22-install-clang10/ ","date":"2023-12-25","objectID":"/posts/afl-install/:1:3","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"2 安装 Z3 要求版本号大于4.5 git clone https://github.com/Z3Prover/z3.git cd z3 \u0026\u0026 mkdir build \u0026\u0026 cd build cmake -G \"Ninja\" ../ ninja Git Clone错误解决方案 执行 git clone 报错： fatal: unable to access ' https://github.com/Z3Prover/z3/ ': GnuTLS recv error (-110): The TLS connection was non-properly terminated. 解决方案 sudo apt-get update sudo apt-get install gnutls-bin git config --global http.sslVerify false git config --global http.postBuffer 1048576000 到此问题解决，重新进行git clone，可以顺畅下载。 ","date":"2023-12-25","objectID":"/posts/afl-install/:2:0","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"3 安装 AFL git clone -b v2.56b https://github.com/google/AFL.git afl cd afl \u0026\u0026 make afl工具列表 ","date":"2023-12-25","objectID":"/posts/afl-install/:3:0","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"3.1 安装 qemu 模式 编译 qemu，支持二进制文件黑盒分析。 3.1.1 依赖环境 安装 libtool 等资源库 sudo apt-get install libtool-bin libgtk2.0-dev -y 3.1.2 patch 代码 为了避免 AFL/issues/41 中出现的error: ‘SIOCGSTAMP’ undeclared here (not in a function); did you mean ‘SIOCSRARP’?、error: ‘SIOCGSTAMPNS’ undeclared here (not in a function); did you mean ‘SIOCGSTAMP_OLD’?，需要修改为 patch 中的文件内容。修改 afl/qemu_mode/patches目录中的syscall.diff文件内容如下： --- qemu-2.10.0-clean/linux-user/syscall.c 2020-03-12 18:47:47.898592169 +0100 +++ qemu-2.10.0/linux-user/syscall.c 2020-03-12 19:16:41.563074307 +0100 @@ -34,6 +34,7 @@ #include \u003csys/resource.h\u003e #include \u003csys/swap.h\u003e #include \u003clinux/capability.h\u003e +#include \u003clinux/sockios.h\u003e // https://lkml.org/lkml/2019/6/3/988 #include \u003csched.h\u003e #include \u003csys/timex.h\u003e #ifdef __ia64__ @@ -116,6 +117,8 @@ int __clone2(int (*fn)(void *), void *ch #include \"qemu.h\" +extern unsigned int afl_forksrv_pid; + #ifndef CLONE_IO #define CLONE_IO 0x80000000 /* Clone io context */ #endif @@ -256,7 +259,9 @@ static type name (type1 arg1,type2 arg2, #endif #ifdef __NR_gettid -_syscall0(int, gettid) +// taken from https://patchwork.kernel.org/patch/10862231/ +#define __NR_sys_gettid __NR_gettid +_syscall0(int, sys_gettid) #else /* This is a replacement for the host gettid() and must return a host errno. */ @@ -6219,7 +6224,8 @@ static void *clone_func(void *arg) cpu = ENV_GET_CPU(env); thread_cpu = cpu; ts = (TaskState *)cpu-\u003eopaque; - info-\u003etid = gettid(); + // taken from https://patchwork.kernel.org/patch/10862231/ + info-\u003etid = sys_gettid(); task_settid(ts); if (info-\u003echild_tidptr) put_user_u32(info-\u003etid, info-\u003echild_tidptr); @@ -6363,9 +6369,11 @@ static int do_fork(CPUArchState *env, un mapping. We can't repeat the spinlock hack used above because the child process gets its own copy of the lock. */ if (flags \u0026 CLONE_CHILD_SETTID) - put_user_u32(gettid(), child_tidptr); + // taken from https://patchwork.kernel.org/patch/10862231/ + put_user_u32(sys_gettid(), child_tidptr); if (flags \u0026 CLONE_PARENT_SETTID) - put_user_u32(gettid(), parent_tidptr); + // taken from https://patchwork.kernel.org/patch/10862231/ + put_user_u32(sys_gettid(), parent_tidptr); ts = (TaskState *)cpu-\u003eopaque; if (flags \u0026 CLONE_SETTLS) cpu_set_tls (env, newtls); @@ -11402,7 +11410,8 @@ abi_long do_syscall(void *cpu_env, int n break; #endif case TARGET_NR_gettid: - ret = get_errno(gettid()); + // taken from https://patchwork.kernel.org/patch/10862231/ + ret = get_errno(sys_gettid()); break; #ifdef TARGET_NR_readahead case TARGET_NR_readahead: @@ -11688,8 +11697,20 @@ abi_long do_syscall(void *cpu_env, int n break; case TARGET_NR_tgkill: - ret = get_errno(safe_tgkill((int)arg1, (int)arg2, - target_to_host_signal(arg3))); + { + int pid = (int)arg1, + tgid = (int)arg2, + sig = (int)arg3; + + /* Not entirely sure if the below is correct for all architectures. */ + + if(afl_forksrv_pid \u0026\u0026 afl_forksrv_pid == pid \u0026\u0026 sig == SIGABRT) + pid = tgid = getpid(); + + ret = get_errno(safe_tgkill(pid, tgid, target_to_host_signal(sig))); + + } + break; #ifdef TARGET_NR_set_robust_list 替换syscall.diff文件内容 在 afl/qemu_mode/patches目录中新增memfd_create.diff文件，内容如下： diff -ru qemu-2.10.0-clean/util/memfd.c qemu-2.10.0/util/memfd.c --- qemu-2.10.0-clean/util/memfd.c 2018-11-20 18:11:00.170271506 +0100 +++ qemu-2.10.0/util/memfd.c 2018-11-20 18:11:13.398423613 +0100 @@ -37,7 +37,7 @@ #include \u003csys/syscall.h\u003e #include \u003casm/unistd.h\u003e -static int memfd_create(const char *name, unsigned int flags) +int memfd_create(const char *name, unsigned int flags) { #ifdef __NR_memfd_create return syscall(__NR_memfd_create, name, flags); 新增memfd_create.diff文件 3.1.3 修改脚本 修改build_qemu_support.sh文件 修改QEMU_URL为QEMU_URL=\"https://download.qemu.org/qemu-${VERSION}.tar.xz\" 修改QEMU_URL 在patch -p1 \u003c../patches/syscall.diff || exit 1的下一行添加patch -p1 \u003c../patches/memfd_create.diff || exit 1 添加memfd_create.diff patch命令 3.1.4 编译及安装 在 afl 的根目录打开终端执行以下命令： cd qemu_mode ./build_qemu_support.sh cd .. sudo make install afl编译成功示例 ","date":"2023-12-25","objectID":"/posts/afl-install/:3:1","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"3.2 运行 qemu mode 假设存在文件目录结构如下。其中in文件夹中的a.in文件是输入的初始种子，手动输入一个命令行参数进去即可。 ./qemu-test/ ├── benchmark /* 要测试的程序二进制文件 */ ├── in /* 输入文件夹，存储用户自定义的输入种子 */ │ └── a.in └── out /* 输出文件夹，存储AFL探索到的测试用例 */ 则使用以下命令运行 AFL qemu mode。稍等片刻，就可以看到 AFL 运行界面。 afl-fuzz -i in/ -o out/ -Q ./benchmark 运行 qemu mode 3.2.1 停止运行 当cycles done的数字变成绿色，说明 AFL 已找不到更有价值的路径。此时，就可以按下Ctrl+C终止 AFL 运行。 绿色，可以停止运行AFL ","date":"2023-12-25","objectID":"/posts/afl-install/:3:2","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"4 失败报错解决方案 ","date":"2023-12-25","objectID":"/posts/afl-install/:4:0","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"4.1 core_pattern core_pattern错误 参考 AFL fuzzing without root - avoid modifying /proc/sys/kernel/core_pattern，这是因为 AFL 希望系统将 coredump 输出到文件，而不是上报给系统的处理程序。报错信息如下： core dump报错 [-] Hmm, your system is configured to send core dump notifications to an external utility. This will cause issues: there will be an extended delay between stumbling upon a crash and having this information relayed to the fuzzer via the standard waitpid() API. To avoid having crashes misinterpreted as timeouts, please log in as root and temporarily modify /proc/sys/kernel/core_pattern, like so: echo core \u003e/proc/sys/kernel/core_pattern [-] PROGRAM ABORT : Pipe at the beginning of ‘core_pattern’ Location : check_crash_handling(), afl-fuzz.c:7314 解决方法有两种： 添加环境变量，参考 Disabling the /proc/sys/kernel/core_pattern check export AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 注意 按照之前 stackoverflow问题中的评论，这个环境变量只是抑制了有关它的警告？使用此标志，AFL 将运行并且不会显示警告消息，并可能错过崩溃。 按照 AFL 提示修改文件 sudo su echo core \u003e/proc/sys/kernel/core_pattern ","date":"2023-12-25","objectID":"/posts/afl-install/:4:1","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["科研"],"content":"4.2 CPU frequency CPU frequency错误 报错信息如下： core dump报错 [-] Whoops, your system uses on-demand CPU frequency scaling, adjusted between 781 and 1660 MHz. Unfortunately, the scaling algorithm in the kernel is imperfect and can miss the short-lived processes spawned by afl-fuzz. To keep things moving, run these commands as root: cd /sys/devices/system/cpu echo performance | tee cpu*/cpufreq/scaling_governor You can later go back to the original state by replacing 'performance' with 'ondemand'. If you don't want to change the settings, set AFL_SKIP_CPUFREQ to make afl-fuzz skip this check - but expect some performance drop. [-] PROGRAM ABORT : Suboptimal CPU scaling governor Location : check_cpu_governor(), afl-fuzz.c:7376 这是 CPU 频率未固定的错误提示，参考这里，解决方案是引入环境变量： export AFL_SKIP_CPUFREQ=1 ","date":"2023-12-25","objectID":"/posts/afl-install/:4:2","tags":["Ubuntu","Linux","AFL","模糊测试"],"title":"Ubuntu 22.04 安装 AFL 及 qemu mode 实践","uri":"/posts/afl-install/"},{"categories":["blog"],"content":"个人博客访问速度优化记录。使用自定义域名、分流CDN等方法实现加快加载速度。","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog"],"content":"个人博客访问速度优化记录。使用自定义域名、分流CDN等方法实现加快加载速度。 使用 Github Pages 可以方便地搭建自己的静态网站，详细过程参考我的这篇文章。 使用 hugo 和 Github Pages 搭建个人博客 https://www.haoyep.com/posts/windows-hugo-blog-github/ 但由于众所周知的原因，此方法搭建的博客在国内访问速度不佳。因此考虑采用一些方法来加速访问，主要思路是使用 CDN 加速网站的静态资源。 对于不同的静态资源，加速方法分别如下： 使用自定义域名，见个人 Github 博客设置自定义域名； js/css文件 使用jsdelivr 和 unpkg 进行 CDN 加速，亲测使用自定义域名后，这两个 CDN 反而会降速。因此不需要单独对js/css文件加速。 托管在 Github 仓库上的图床图片。 本人博客上的图片都是使用 PicGo 上传到图床，图床是用 GitHub 仓库搭建的，见图床搭建过程 。为了加快 GitHub 文件访问速度，参考通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源，通过自定义域名区分国内外请求，分配不同的 CDN 资源。最后，替换博客内所有 Github 文件链接即可。 替换 Github 文件链接 加速谷歌字体 加速 avatar 头像 ","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/:0:0","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog"],"content":"1 图片加速 首先参考这篇文章，搭建加速域名。 通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源 https://www.haoyep.com/posts/github-graph-beds-cdn/ 对于要使用的图片，使用 PicGo 上传到 GitHub 图床，获取 CDN 加速链接。然后在配置文件中使用相应的链接即可。下面介绍几个配置中常见的图片。 ","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/:1:0","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog"],"content":"1.1 网站图片 # 网站图片，用于 Open Graph 和 Twitter Cards images = [\"https://cdn.haoyep.com/gh/leegical/Blog_img/cdnimg/weblogo.png\"] 网站图片，用于 Open Graph 和 Twitter Cards ","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/:1:1","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog"],"content":"1.2 网站图标 配置：[params]——[params.app]。 # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题，覆盖默认标题 title = \"Leehow\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标，可替代旧的 .png 和 .ico 文件 svgFavicon = \"https://cdn.haoyep.com/gh/leegical/Blog_img/favicon.svg\" 网站图标 ","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/:1:2","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog"],"content":"1.3 网站 logo 配置：[params]——[params.header]——[params.header.title]。 # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"https://cdn.haoyep.com/gh/leegical/Blog_img/cdnimg/weblogo.png\" 网站 logo ","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/:1:3","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog"],"content":"1.4 主页头像 配置：[params]——[params.home]——[params.home.profile]。 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"https://cdn.haoyep.com/gh/leegical/Blog_img/cdnimg/avatar.png\" 主页头像 ","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/:1:4","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog"],"content":"2 加速谷歌字体 FixIt 主题默认使用系统字体作为博客渲染字体，免去了加载字体。 Fixit主题全局字体 但是想要为一些特定区域，如 code 设置特别字体时，就需要用到谷歌字体。这里选择使用 fonts.loli.net 加速。在 assets/css 中新建 _override.scss 文件，内容如下： @import url('https://fonts.loli.net/css?family=JetBrains+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: JetBrains Mono, Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 加速code的谷歌字体 ","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/:2:0","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog"],"content":"3 加速 avatar 头像 在 hugo.toml 设置 Gravatar 主机为七牛云地址 dn-qiniu-avatar.qbox.me： # FixIt 0.2.14 | NEW Gravatar 设置 [params.gravatar] # 取决于作者邮箱，作者邮箱未设置则使用本地头像 enable = true # Gravatar 主机，默认：“www.gravatar.com” host = \"dn-qiniu-avatar.qbox.me\" # [\"cn.gravatar.com\", \"gravatar.loli.net\", ...] style = \"identicon\" # [\"\", \"mp\", \"identicon\", \"monsterid\", \"wavatar\", \"retro\", \"blank\", \"robohash\"] 设置 Gravatar 主机为七牛云地址 ","date":"2023-12-17","objectID":"/posts/optimize-github-pages-blog-access-speed/:3:0","tags":["git","Fixit"],"title":"Github Pages 博客网站访问速度优化","uri":"/posts/optimize-github-pages-blog-access-speed/"},{"categories":["blog","markdown"],"content":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 静态资源(GitHub图床)，自动实现 CDN 资源的海内外分流，加速博客访问速度。","date":"2023-12-14","objectID":"/posts/github-graph-beds-cdn/","tags":["git","markdown","Cloudflare"],"title":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源","uri":"/posts/github-graph-beds-cdn/"},{"categories":["blog","markdown"],"content":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 静态资源(GitHub图床)，自动实现 CDN 资源的海内外分流，加速博客访问速度。 ","date":"2023-12-14","objectID":"/posts/github-graph-beds-cdn/:0:0","tags":["git","markdown","Cloudflare"],"title":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源","uri":"/posts/github-graph-beds-cdn/"},{"categories":["blog","markdown"],"content":"1 前言 上一篇文章讲述了如何使用 PicGo + GitHub 搭建图床，这样搭建的图床很稳定，但缺点是国内访问速度慢。可以使用 jsDelivr 对 Github 图床等静态资源进行免费 CDN 加速 使用PicGo + GitHub 搭建 Obsidian 图床 https://www.haoyep.com/posts/github-graph-beds/ jsDelivr是什么？ jsDelivr是国外的一家优秀的公共 CDN 服务提供商，该平台是首个「打通中国大陆与海外的免费 CDN 服务」，无须担心中国防火墙问题而影响使用。官网：http://www.jsdelivr.com/(opens new window) 但是jsDelivr因为掉 ICP 等原因，国内速度越来越慢。好在 Chinajsdelivr 项目将它在国内“复活”了。 因此，本文思路是，对于 Github 公开仓库中的静态资源： 如果访问来源是国内，则使用 Chinajsdelivr 进行加速，域名为jsd.cdn.zzko.cn 如果访问来源是国内，则使用原版 jsDelivr 进行加速，域名为cdn.jsDelivr.net 即： # 1-1. Github raw 链接 https://raw.githubusercontent.com/leegical/Blog_img/main/md_img202305061640828.png # 1-2. Github 仓库文件链接 https://github.com/leegical/Blog_img/blob/main/md_img202305061640828.png # 国内请求将访问到 https://jsd.cdn.zzko.cn/gh/leegical/Blog_img/md_img202305061640828.png # 国外请求将访问到 https://cdn.jsdelivr.net/gh/leegical/Blog_img/md_img202305061640828.png 也就是说，我希望对于同一个资源链接，能够根据国内外请求来源自动重定向，使用不同的 CDN 加速链接。这就可以使用 Cloudflare 的重定向规则。 ","date":"2023-12-14","objectID":"/posts/github-graph-beds-cdn/:1:0","tags":["git","markdown","Cloudflare"],"title":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源","uri":"/posts/github-graph-beds-cdn/"},{"categories":["blog","markdown"],"content":"2 Cloudflare ","date":"2023-12-14","objectID":"/posts/github-graph-beds-cdn/:2:0","tags":["git","markdown","Cloudflare"],"title":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源","uri":"/posts/github-graph-beds-cdn/"},{"categories":["blog","markdown"],"content":"2.1 配置域名 使用 Cloudflare 托管域名，这一点教程很多，跟着做就行， 托管域名 在 DNS 配置中，新增一条 CNAME 解析记录，并启用代理。 如图，我这里是将 cdn.haoyep.com 解析到了 jsd.cdn.zzko.cn，并使用 Cloudflare 代理（点亮小云朵）。 添加CNAME解析记录 ","date":"2023-12-14","objectID":"/posts/github-graph-beds-cdn/:2:1","tags":["git","markdown","Cloudflare"],"title":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源","uri":"/posts/github-graph-beds-cdn/"},{"categories":["blog","markdown"],"content":"2.2 配置重定向规则 目标：资源链接都使用 cdn.haoyep.com，Cloudflare 在代理 cdn.haoyep.com 时，判断请求来源是国内，则将 cdn.haoyep.com 重定向到 jsd.cdn.zzko.cn；国外的请求则重定向到 cdn.jsdelivr.net。 配置国内重定向 规则名称 （必需）：标注国内，方便区分 自定义筛选表达式：(http.host eq \"cdn.haoyep.com\" and ip.geoip.country eq \"CN\") URL 重定向 类型：动态 表达式：concat(\"https://jsd.cdn.zzko.cn\", http.request.uri.path) 状态代码：302 国内重定向规则配置 配置国外重定向 规则名称 （必需）：标注国外，方便区分 自定义筛选表达式：(http.host eq \"cdn.haoyep.com\" and ip.geoip.country ne \"CN\") URL 重定向 类型：动态 表达式：concat(\"https://cdn.jsdelivr.net\", http.request.uri.path) 状态代码：302 国外重定向规则配置 技巧 HTTP 重定向状态选择302而不是301。虽然两类请求都会被 Cloudflare 缓存，但301理论上是永久跳转而302是临时跳转，因此301可能会导致长时间缓存，不利于今后修改重定向到新地址。 ","date":"2023-12-14","objectID":"/posts/github-graph-beds-cdn/:2:2","tags":["git","markdown","Cloudflare"],"title":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源","uri":"/posts/github-graph-beds-cdn/"},{"categories":["blog","markdown"],"content":"3 PicGo 设置 为了让上传的图片自动生成 CDN 链接，还需要配置 PicGo： PicGo Github 图床设置 设定存储路径：可以不填，也可以填仓库的某个文件夹 自定义域名： 改为https://\u003ccdn加速链接\u003e/gh/\u003c用户名\u003e/\u003c图床仓库名\u003e，如图我这里改成 https://cdn.haoyep.com/gh/leegical/Blog_img 即可。 对于之前文章中的 Github raw 或文件链接，替换成 CDN 链接即可。本文只需要进行以下替换： # 要替换的 https://raw.githubusercontent.com/leegical/Blog_img/main https://github.com/leegical/Blog_img/blob/main # 替换为 https://cdn.haoyep.com/gh/leegical/Blog_img ","date":"2023-12-14","objectID":"/posts/github-graph-beds-cdn/:3:0","tags":["git","markdown","Cloudflare"],"title":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源","uri":"/posts/github-graph-beds-cdn/"},{"categories":["blog","markdown"],"content":"4 参考文章 Chinajsdelivr简介 https://github.com/54ayao/Chinajsdelivr?tab=readme-ov-file 利用 Cloudflare 重定向规则实现 CDN 资源的海内外分流 https://upup.dev/posts/cloudflare-country-based-cdn-redirect/ 使用npm加速静态资源 https://irithys.com/p/%E4%BD%BF%E7%94%A8npm%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/ ","date":"2023-12-14","objectID":"/posts/github-graph-beds-cdn/:4:0","tags":["git","markdown","Cloudflare"],"title":"通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源","uri":"/posts/github-graph-beds-cdn/"},{"categories":["blog","markdown"],"content":"使用 PicGo + GitHub 搭建 Obsidian 图床，剪贴板自动上传图片，稳定可靠","date":"2023-12-14","objectID":"/posts/github-graph-beds/","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"使用 Obsidian 等 Markdown 编辑器时，可靠又稳定的图床是必不可少的。PicGo + GitHub 背靠微软，稳定性问题基本不用担心，可以实现粘贴图片自动上传到 GitHub 的公有仓库。而且配置简单，使用优雅。 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:0:0","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"1 Github ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:1:0","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"1.1 创建仓库 登陆 github ，创建公开仓库 创建公开图床仓库 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:1:1","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"1.2 github 获取个人 token 生成一个token用于PicGo访问图床仓库。 访问：settings-tokens ，点击Generate new token Generate new token 设置 token 属性 Expiration：no expiration Select scopes：repo 一定要全选，其他的无所谓 设置 token 属性 点击Generate token，生成 token。 注意 这个 token 生成后只会显示这一次！注意复制、保存到其他地方以备后续使用。 复制token ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:1:2","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"2 PicGo 到 Github 发布页面下载 PicGo 最新安装包。 2.4.0-beta.6 国内可下载链接 PicGo-2.4.0-beta.6-arm64.dmg PicGo-2.4.0-beta.6-x64.dmg PicGo-2.4.0-beta.6.AppImage PicGo-Setup-2.4.0-beta.6-ia32.exe PicGo-Setup-2.4.0-beta.6-x64.exe PicGo-Setup-2.4.0-beta.6.exe picgo_2.4.0-beta.6_amd64.snap PicGo安装包列表 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:2:0","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"2.1 配置 github 图床 仓库名的格式是用户名/仓库，一般选择 main 分支。token 是 1.2 中获取的。 存储路径：可以选择让上传的图片单独放在仓库的某个文件夹中 自定义域名：下一篇文章 CDN 加速图床使用，这里先不用填 github 图床设置 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:2:1","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"2.2 PicGo 设置 如果之后自动粘贴图片上传失败，可以尝试把内置剪贴板上传功能关闭或开启。 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:2:2","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"3 Obsidian Obsidian 官网下载链接 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:3:0","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"3.1 安装插件 设置——第三方插件——关闭安全模式——社区插件市场 准备安装插件 搜索 image auto upload plugin 插件并安装 安装image auto upload plugin插件 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:3:1","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"3.2 配置插件 开启剪贴板自动上传 接口一一对应（一般默认就是对应好的，不用改） 配置插件 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:3:2","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"3.3 使用效果 复制完图片后，在obsidian中使用Ctrl+V快捷键自动上传图片，并生成Markdown图片链接。 使用效果 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:3:3","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["blog","markdown"],"content":"4 参考文章 一劳永逸，使用 PicGo + GitHub 搭建个人图床工具 https://segmentfault.com/a/1190000041076406 体验PicGo+GitHub搭建图床，使用jsDelivr或Github raw免费加速 https://zhuanlan.zhihu.com/p/638224211 obsidian图床（GitHub）设置 https://zhuanlan.zhihu.com/p/603385132 ","date":"2023-12-14","objectID":"/posts/github-graph-beds/:4:0","tags":["git","markdown","Obsidian"],"title":"使用PicGo + GitHub 搭建 Obsidian 图床","uri":"/posts/github-graph-beds/"},{"categories":["科研"],"content":"Digfuzz工具论文调研：《Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing》","date":"2023-12-10","objectID":"/posts/digfuzz/","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"论文调研：《Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing》 ","date":"2023-12-10","objectID":"/posts/digfuzz/:0:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"1 背景知识 参考文章 阅读笔记：《The Art, Science, and Engineering of Fuzzing: A Survey》 Hybrid Fuzzing Paper Summary ","date":"2023-12-10","objectID":"/posts/digfuzz/:1:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"1.1 fuzzing 的分类 根据 fuzzer 观察到的语义粒度，fuzzer 被分为黑盒 fuzzer、灰盒 fuzzer 和白盒 fuzzer。 根据 PUT 输入可分为 file, network, UI, web, kernel I/O, or threads fuzzer 1.1.1 黑盒（black-box）fuzzer 仅考虑输入、输出信息作为 fuzzer 的 knowledgement IO-driven or data-driven modern fuzzers：the structural informa about inputs 1.1.2 白盒（white-box）fuzzer 分析 PUT 内部结构以及 PUT 执行所产生的信息，系统探索 PUT 状态空间 DSE 动态符号执行（dynamic symbolic execution，concolic testing，symbolic execution+concrete execution），简化符号执行的约束条件 污点分析（taint analysis） 开销较大（higher overhead）：动态执行+SMT solving 1.1.3 灰盒（grey-box）fuzzer 部分 PUT 内部结构信息以及 PUT 执行所产生的信息 不考虑完整的语义信息 lightweight static analysis or dynamic information about execution（e.g. code coverage） approximated, imperfect information 加快速度和产生更多的测试用例 1.1.4 Dynamic Symbolic Execution 经典的符号执行是指使用符号化的值作为输入运行一个程序，这些符号化的变量代表所有可能的值。当符号执行器执行 PUT 时，它会建立一个符号表达式而不是计算实际的变量。当它遇到一个条件分支指令的时候，它会分为两个 symbolic interpreter，一个代表正确分支一个代表错误分支。对每一条路径，symbolic interpreter 会为执行过程中遇到的每一条分支指令建立一个路径公式（路径断言）。如果存在一个实际的输入，能够执行目标路径，那么就说该路径公式是可满足的。可以通过求解 SMT solver 来生成一个适用于路径公式的实际输入。动态符号执行是传统的符号执行的变体，在动态符号执行过程中，符号执行和实际的执行会同时进行。因此，动态符号执行通常被称为 concolic（concrete+symbolic）测试。结合动态执行的优点是实际的执行可以减小符号约束的复杂度。 相比较于灰盒或者黑盒方法而言，动态符号执行是很慢的，这是由于它需要分析 PUT 的每一条指令并插桩。为了解决开销过大的问题，一种缩小动态符号执行范畴的通用策略被提出：让用户确定代码中不感兴趣的部分或者感兴趣的片段、交替使用 conclic testing 和灰盒 fuzzing。 DigFuzz DigFuzz: 用灰盒测试确定每个分支执行概率，再使用白盒 fuzzer 对对于灰盒 fuzzing 比较 challenging 的路径进行 fuzzing DigFuzz 提出基于蒙特卡洛的路径概率排序模型 (Monte Carlo Based Probabilistic Path Prioritization Model, $MCP^3$)，在 fuzzing 的过程中，用 seed 的 trace 构建执行路径树，用覆盖率计算每个分支的概率，路径的概率为路径上分支的概率相乘，最后基于路径的概率对路径进行排序，概率越小代表路径越难探索，将最难探索的路径优先给 concolic execution 进行探索。 Probabilistic Path Prioritization for Hybrid Fuzzing 主要翻译参考自 DigFuzz。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:1:1","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"2 Abstract 混合模糊测试结合了模糊测试和符号执行，是一种先进的软件漏洞检测技术。基于对模糊和符号执行本质上是互补的观察，最先进的混合模糊测试系统部署了需求启动 demand launch和最佳切换 optimal switch策略。虽然这些想法听起来很有意思，但由于过于简单的假设，我们指出了它们中的几个基本限制。 然后，我们提出了一种新颖的判别式调度 discriminative dispatch策略，以更好地利用符号执行的能力。我们设计了一种新的基于Monte Carlo的概率路径优先级模型，用于量化每条路径的难度，并优先考虑它们的符号执行。此模型将模糊测试视为随机抽样过程，根据采样信息计算每个路径的概率。最后，我们的模型优先考虑并指定最困难的路径来符号执行。 我们实现了原型系统DigFuzz，并使用两个有代表性的数据集评估我们的系统。结果表明，在各个主要方面，DigFuzz中的符号执行性能优于最先进的混合模糊测试系统。特别是，DigFuzz中的符号执行有助于发现更多的漏洞（12对5），并在CQE数据集上产生比在Driller中执行的更多代码覆盖（18.9％对3.8％）。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:2:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"3 Introduction 软件漏洞被认为是对网络空间最严重的威胁之一。因此，发现一个软件中的漏洞至关重要[12]，[16]，[25]，[27]，[32]。最近，模糊测试和符号执行的组合——混合模糊测试，在漏洞发现中变得越来越流行[5]，[29]，[31]，[39]，[42]，[46]。 由于模糊测试和符号执行本质上是互补的，因此将它们结合起来可以潜在地利用它们的独特优势并减轻弱点。更具体地说，模糊测试（Fuzzing）擅长探索包含一般分支（具有大的满足值空间的分支，比如 x\u003e100）的路径，但是不能探索包含特定分支的路径（具有非常窄的满足值空间的分支,比如 x=2）[27]。相反，符号执行能够生成具体的输入，确保程序沿着特定的执行路径执行，但它会遇到路径爆炸问题[9]。 在混合方案中，模糊测试由于高吞吐量通常承担路径探索的大多数任务，而符号执行辅助模糊测试探索低概率的路径、并且生成满足特定分支的输入。通过这种方式，可以减轻分支符号执行中的路径爆炸问题，因为符号执行仅负责探索可能阻止模糊测试的低概率路径。 关键的研究问题是如何结合模糊测试和符号执行以实现最佳的整体性能。Driller[39]和hybrid concolic testing[29]采取需求启动策略：模糊测试首先开始，并且只有当模糊测试在一段时间内无法取得任何进展（即卡住stuck）时才会启动符号执行。最近的一项工作[42]提出了一种最佳切换 optimal switch策略：它通过模糊测试和符号执行来量化探索每条路径的成本，并选择更经济的方法来探索这条路径。 我们使用DARPA CQE数据集[13]和LAVA-m数据集[15]评估了需求启动和最佳切换策略，并发现尽管这些策略听起来很有趣，但由于不太现实或过度简化的假设，它们都没有充分发挥作用。 对于需求启动 demand launch策略： 模糊器(Fuzzer)的卡住状态不是良好的启动符号执行指标 模糊测试正在取得进展，并不一定意味着不需要进行符号执行。模糊器仍然可以探索新代码，即使它已经被许多特定分支阻塞，而因为模糊器未处于卡住状态，因此符号执行器被迫空闲。 该策略无法识别阻止模糊测试的特定路径 一旦模糊器卡住，需求启动 demand launch策略就会将模糊器保留的所有种子提供给符号执行，用于探索所有错过路径。然后，这种大量错过的路径会让执符号执行不堪重负，并且可能会在很长一段时间后为特定路径生成有效的输入。到那时，模糊器可能已经生成了一个良好的输入来遍历该特定路径，从而使整个符号执行变得毫无用处。 同样，尽管最佳切换 optimal switch策略旨在基于可靠的数学模型（即，具有成本的马尔可夫决策过程，简称MDPC）做出最优决策，但是量化每条路径的模糊测试和符号执行的成本是非常重要的。例如，为了量化特定路径的独立执行成本，MDPC需要收集已经很昂贵的路径约束。结果，MDPC的总吞吐量大大降低。此外，在量化模糊测试的成本时，MDPC假设所有测试用例均匀分布。这种假设过于简单，因为许多最先进的模糊测试技术[4]，[12]，[16]是自适应和进化的。最后，即使可以准确地估计模糊测试和符号执行的成本，但要将它们标准化以进行统一比较是具有挑战性的，因为这两种成本是通过具有不同度量的技术来估计的。 基于这些观察，我们在构建混合模糊测试系统时争论以下设计原则： 由于符号执行比模糊测试慢几个数量级，我们应该只让它解决最难的问题，并让模糊测试采取路径探索的多数任务 由于高吞吐量对于模糊测试至关重要，因此任何额外的分析都必须是轻量级的，以避免对模糊测试的性能产生不利影响。 在本文中，我们提出了一种判别式调度 discriminative dispatch策略，以更好地结合模糊测试和符号执行： 优先考虑路径，更好地利用符号执行的能力：以便符号执行仅用于模糊测试最难以突破的选择性路径 这种判别式调度策略的关键是量化每条路径的难度级别的轻量级方法。先前的工作通过执行昂贵的符号执行来解决这个问题[18]，因此不适合我们的目的。 特别地，我们提出了一种新的基于蒙特卡罗的概率路径优先级（$MCP^3$）模型，以有效的方式量化每个路径的难度。通过随机输入$\\Rightarrow$遍历该路径的概率$\\Rightarrow$量化路径的难度。我们使用蒙特卡罗方法[35]计算这个概率。核心思想是将模糊测试视为随机抽样过程，将随机执行视为整个程序空间的样本，然后根据抽样信息计算每个路径的概率。 我们已经实现了一个名为DigFuzz的原型系统。它利用流行的模糊器，American Fuzzy Lop(AFL)[47]作为模糊组件，并在开源符号执行引擎Angr之上构建了一个符号执行器[38]。我们使用来自 ARPA Cyber Grand Challenge [13]和 LAVA 数据集[15]的 CQE 评估来评估DigFuzz的有效性。评估结果表明，与最先进的混合系统相比，DigFuzz中的复杂执行对代码覆盖率的增加和发现的漏洞数量的增加做出了更大的贡献。相较于 Driller [39]，DigFuzz有助于发现更多的漏洞（12对5），并在 CQE 数据集上产生更多的代码覆盖率（18.9％对3.8％）。 论文贡献概述如下： 我们对两种最先进的混合模糊测试策略（需求启动和最佳切换）进行独立评估，并发现以前未报告过的几个重要限制。 我们提出了一种新颖的判别式调度策略，作为构建混合模糊测试系统的更好方法。它遵循两个设计原则：1）让模糊测试进行路径探索的大多数任务，并且只分配最困难的路径进行符号执行; 2）路径困难的量化必须是轻量级的。为了实现这两个原则，我们设计了一个基于蒙特卡罗的概率路径优先模型。 我们实施原型系统DigFuzz，并使用DARPA CQE数据集和LAVA数据集评估其有效性。我们的实验表明DigFuzz在更多发现的漏洞和更高的代码覆盖率方面优于最先进的混合系统Driller和MDPC。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:3:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"4 Background And Motivation Fuzzing [30]和concoic execution [9]是软件测试和漏洞检测的两种代表性技术。 由于观察到模糊和执行的执行在本质上可以相互补充，已经提出了一系列技术[5]，[29]，[31]，[39]，[42]将它们组合在一起并创建混合模糊系统。通常，这些混合模糊测试系统分为两类：“需求启动”和“最佳切换”。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:4:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"4.1 Demand Launch 最先进的混合方案，如Driller [39]和混合动力系统测试[29]部署了“需求启动”战略。在Driller [39]中，由于模糊器在一段时间内无法取得任何进展，因此该模板执行器仍处于空闲状态。然后，它依次处理来自模糊器的所有保留输入，以生成可能有助于模糊器的输入，并进一步导致新的代码覆盖。类似地，混合分析测试[29]通过混合测试获得了对程序状态空间的深入和广泛的探索。它通过利用随机测试的能力快速到达程序状态，然后通过执行执行彻底探索邻居状态。 在一个问题上，必须有两个假设才能使“需求启动”战略按预期发挥作用： 非卡住状态的模糊器意味着不需要执行。只有当模糊器卡住时，混合系统才应该开始执行。 卡住状态表明模糊器在可接受的时间内无法在发现新的代码覆盖范围方面取得任何进展。此外，具有执行力的执行能够找到并解决阻塞模糊器的难以解决的条件检查，以便模糊测试可以继续发现新的覆盖范围。 4.1.1 观察 为了评估需求启动战略的表现，我们仔细研究了 Driller 如何在 DARPA Cyber Grand Challenge（CGC）的12个小时中工作12小时，并找到五个有趣且令人惊讶的事实。 调用 concolic 执行的百分比较低。Driller 仅在118个二进制文件中的49个中调用了 concoic 执行，这意味着模糊器只会卡在这49个二进制文件上。这一事实与 Driller [40]的论文中报道的数字（42）相当。 卡住的时间段较少。对于事实1中的49个二进制文件，我们统计计算卡住时间段，卡住时间段的分布如图1所示。我们可以观察到超过85％的卡住时间段低于100秒。 图1. 停滞状态持续时间的累积分布 巨大的吞吐量差距。表1 中的执行时间表明，模糊测试的吞吐量比 concolic 执行的吞吐量高出几个数量级。因此，一个实际的设计应该只选择很少的输入来执行，而不是“需求启动”策略，后者将模糊测试保留的所有输入都提供给 concolic 执行器。平均而言，为一个具体的输入完成动态符号执行需要1654秒。 表1 执行时间比较 实用性低。由于存在如此巨大的吞吐量差距，在实践中，对于“需求启动”策略，符号执行对模糊测试的帮助很有限。图2显示了对 CQE 二进制文件进行符号执行（angr）处理的输入数量和模糊测试器保留的输入数量（23915个中的1709个）。对于12个实际程序，表2显示 QSYM 处理了795个输入，而模糊测试器保留的输入总数为15269个。平均而言，在12小时的测试中，只有模糊测试器保留的输入中的6.3%被符号执行器处理。 图2. 模糊器保留的输入数和 concolic 执行处理的输入数。 表2 输入由 Fuzzer 保留并由 QSYM 处理 对代码覆盖率的贡献很小。在 12 小时的测试结束时，“需求启动”策略在 49 个 CQE 二进制文件上调用了 concolic 执行，并完成了 1709 次运行。更详细的调查显示，总共只有 51 个由 concolic 执行生成的输入是通过模糊测试导入的，并且 concolic 执行只能通过生成至少一个导致新代码覆盖率的输入来帮助对 13 个二进制文件进行模糊测试。 4.1.2 局限性 上述结果表明需求启动策略的两个主要局限。 首先，模糊器的卡住状态不是判断是否需要执行模板的好指标。根据事实1，模糊器仅停留在49个二进制文件上，这意味着其他77个二进制文件永远不会启动模仿执行。对这77个二进制文件的源代码进行手动调查表明，它们都包含可以阻止模糊测试的特定分支。进一步结合事实2，我们可以看到处于卡住状态的模糊器并不一定意味着它实际上需要执行，因为大多数卡住状态非常短（85％的卡住状态不到100秒）。这些事实打破了上述假设1。 其次，“需求启动”策略无法识别阻止模糊测试的特定路径，从而导致非常低效的执行。一方面，平均执行平均需要1654秒来处理一个输入（事实3）。另一方面，模糊器通常比常规执行可以保留更多的输入（事实4）。结果，对应于阻止模糊测试的特定分支的输入（即，可能导致执行到目标位置的输入）仅具有非常小的机会被通过结构执行来拾取和处理。因此，上述假设2在实践中并不真正成立。事实5可以进一步证实这一结论，尽管它是在49个二进制文件上发布的，但是对于仅仅13个二进制文件的执行可以帮助模糊测试。此外，在1709次符号执行之后，模糊执行器仅导入了51个来自符号执行的输入，表明由符号执行而产生的输入质量非常低。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:4:1","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"4.2 Optimal Switch “最佳切换”策略旨在基于数学模型（即，具有成本的马尔可夫决策过程，简称MDPC）对使用哪种方法来探索给定的执行路径做出最佳决策。为了获得最佳性能，MDPC 始终选择成本较低的方法来探索每条路径。为了使这一战略运作良好，必须遵循以下假设： 可以准确地估计通过模糊和经验执行来探索路径的成本 成本估算的开销可以忽略不计 用于做出最优决策的算法是轻量级的 4.2.1 观察 为了评估最佳切换的性能，我们评估了 MDPC 如何在 CQE 数据集中对118个二进制文件工作12小时，并有3个有趣的观察结果。 Heavyweight Estimation。表1 显示了模糊测试、MDPC、符号执行（angr、QSYM）中的最佳决策之间的吞吐量差距。可以观察到使用 MDPC 计算概率的成本很高，是模糊测试的大几千倍。 表1 执行时间比较 吞吐量降低。由于 MDPC 在探索每条路径之前做出最佳决策，因此整体分析吞吐量显着降低，从纯模糊测试中每秒执行417次到 MDPC 中每秒执行2.6次。由于吞吐量减少的负面影响，下图显示了由 AFL 维护的位图大小，这是代码覆盖的近似。可以观察到，optimal concolic testing发现的代码覆盖较少，而不如纯模糊测试。 估计不准确。由于吞吐量降低的影响，MDPC 仅在29个二进制文件中发现漏洞，而纯模糊测试可以发现67个二进制文件中的漏洞。 Fuzing和MDPC的代码覆盖率比较 由于 MDPC 在探索每条路径之前做出了最佳决策，昂贵的最优决策都会带走模糊测量的高吞吐量。作为优化，使模糊测试和最优决策工作并行进行，而不是像在原始系统中那样按顺序运行，并构建并发 MDPC。使用相同的数据集对其进行评估，并得出以下观察结果，我们有另一个观察。 在模糊测试开始后的几秒钟内，几乎所有遗漏的路径都决定通过 concolic 执行进行探索。通过检查覆盖率统计，我们观察到模糊器能够在几秒钟内生成数百个测试用例，这导致基于 MDPC 算法的 Fuzzing 搜索遗漏路径的代价很高。相反，即使我们为每个路径约束分配最高的求解成本(如定义[42]所示的50)，也可以降低执行成本。 4.2.2 限制 上述观察结果表明，最佳切换策略的关键限制是估计通过模糊测试和符号执行来探索路径的成本是重量级且不准确的，这掩盖了制定最优解决方案的好处。 首先，估计 concolic 执行的成本依赖于收集路径约束并确定这些约束的解决成本。由于收集路径约束需要将程序语句转换为符号表达式，因此这种解释也是重量级的，特别是对于具有长路径的程序。此外，MDPC 设计了一种贪婪算法以实现最佳决策。该算法依赖于路径敏感的程序分析。对于具有大状态的程序，路径敏感分析也是重量级的。 其次，准确估计通过模糊测试和符号执行探索给定路径的成本是非常重要的。MDPC 根据路径约束的复杂性估计求解代价，并根据覆盖统计估计随机测试的成本。这些估计涉及模糊测试的运行时吞吐量、约束求解器以及符号执行引擎的性能，它们本质上是不同的程序分析技术。因此，定义一个统一的衡量标准来评估不同技术的成本是具有挑战性的。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:4:2","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"5 PROBABILISTIC PATH PRIORITIZATION GUIDED BY MONTE-CARLO 为了解决当前混合模糊测试系统的上述局限性，我们提出了一种新颖的判别调度策略，以更好地结合模糊和执行。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:5:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"5.1 Key Challenge 如上所述，我们策略的关键挑战是以轻量级方式量化模糊器遍历路径的难度。 有一些解决方案可以使用昂贵的程序分析来量化路径的难度，例如值分析[45]和概率符号执行[5]。然而，这些技术并没有解决我们的问题：如果我们已经执行了重量级分析来量化一条路径的难度，我们还不如只解决路径约束并生成一个输入来遍历这条路径。 最近的一项研究[42]提出了一种理论框架，用于优化的结构测试。它定义了基于程序路径概率和约束求解成本的最优策略，然后将问题简化为带有成本的马尔可夫决策过程（简称 MDPC）。本研究与我们的工作有着相似的问题范围。然而，马尔可夫决策过程本身对于具有大状态空间的程序来说是重量级的。此外，模糊测试和符号执行的成本对于评估和标准化以进行比较是具有挑战性的。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:5:1","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"5.2 Monte Carlo Based Probabilistic Path Prioritization Model 在这项研究中，我们提出了一种新的基于Monte Carlo的概率路径优先级模型（简称 $MCP^3$）来应对这些挑战。为了轻量化，我们的模型应用Monte Carlo方法来计算通过模糊测试探索路径的概率。要使蒙特卡罗方法有效运作，需要满足两个要求： 对搜索空间的抽样必须是随机的; 需要大量随机抽样才能使估计具有统计意义。 由于 fuzzer 随机生成用于测试程序的输入，我们的见解是将这些输入的执行视为整个程序状态空间的随机样本，因此满足第一个要求。此外，由于模糊测试具有非常高的吞吐量，因此也可以满足第二个要求。因此，通过将模糊测试作为抽样过程，我们可以通过覆盖统计以轻量级方式统计估计概率。 根据蒙特卡罗方法，我们可以通过统计计算遍历此路径的执行与所有执行的比率来简单地估计路径的概率。然而，这种直观的方法并不实用，因为保持路径覆盖是一项具有挑战性和重要性的任务。考虑到这一点，大多数当前的模糊测试技术采用了轻量级覆盖度量，例如块覆盖和分支覆盖。对于这一挑战，我们将执行路径视为连续分支的马尔可夫链[4]。然后，可以基于路径内所有分支的概率来计算路径的概率。 5.2.1 Probability for each branch 量化了模糊测试器通过条件检查并探索分支的难度。方程式1展示了$MCP^3$如何计算分支的概率。 \\begin{equation*} P\\left(br_i\\right) = \\left\\lbrace \\begin{array}{lr}\\frac{cov \\left(br_i \\right)}{cov \\left(br_i \\right) + cov \\left(br_j \\right)}, \u0026 cov \\left(br_i \\right)\\ne 0 \\\\ \\frac{3} {{cov \\left(br_j \\right)}} , \u0026 cov \\left(br_i \\right) = 0 \\end{array} \\right. \\tag{1} \\end{equation*} 在方程1中，$b_{ri}$ 和 $b_{rj}$ 是共享相同前继块的两个分支，$cov(b_{ri})$ 和 $cov(b_{rj})$ 分别指的是 $b_{ri}$ 和 $b_{rj}$ 的覆盖统计，表示模糊测试器的样本覆盖了 $b_{ri}$ 和 $b_{rj}$ 的次数。 当 $b_{ri}$ 已经被模糊测试器探索过（$cov(b_{ri})$ 非零时），$b_{ri}$ 的概率可以通过将 $b_{ri}$ 的覆盖统计除以 $b_{ri}$ 和 $b_{rj}$ 的总覆盖统计来计算。 当 $b_{ri}$ 之前未被模糊测试器探索过（$cov(b_{ri})$ 为零），我们采用统计学中的三比规则[43]来计算 $b_{ri}$ 的概率。三比规则表明，如果某一事件在包含 n 个主体的样本中未发生，则从 0 到 3/n 的区间是该事件在总体中发生率的95%置信区间。当 n 大于$30$时，这是对来自更敏感测试的结果的一个很好的近似。遵循这个规则，如果 $cov(b_{rj})$ 大于$30$，则 $b_{ri}$ 的概率变为 $3/cov(b_{rj})$。如果 $cov(b_{rj})$ 小于$30$，则该概率在统计上没有意义。换句话说，在覆盖统计大于$30$之前，我们将不计算概率。 5.2.2 Probability for each path 为了计算路径的概率，我们应用马尔可夫链模型[19]，将路径视为相继分支之间的连续转换[4]。模糊测试器探索路径的概率计算如方程2所示。 \\begin{equation*} P \\left(path_j \\right) = \\prod \\lbrace P\\left(br_i \\right) | br_i \\in path_j \\rbrace . \\tag{2} \\end{equation*} 在方程2中，$path_j$ 代表一个路径，$b_{ri}$ 表示路径覆盖的分支，$P(b_{ri})$ 表示 $b_{ri}$ 的概率。路径 $path_j$ 的概率，即 $P(path_j)$，通过将沿路径的所有分支的概率相乘来计算。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:5:2","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"5.3 $MCP^3$ based Execution Tree 在我们的判别式调度策略中，关键思想是从模糊测试执行的运行时信息推断并优先考虑符号执行的路径。为此，我们构建并维护一个基于$MCP^3$的执行树。 5.3.1 定义1 基于$MCP^3$的执行树是是一个有向树 $T = (V, E, \\alpha)$，其中： 顶点集合 $V$ 中的每个元素 $v$ 对应于程序执行期间的程序轨迹中的一个唯一基本块； 边集合 $E⊆V \\times V$ 中的每个元素$e$对应于两个顶点 $v$ 和 $w$ 之间的控制流依赖性，其中$v,w \\in V$。如果一个顶点包含条件检查，则可以有两个输出边； 标记函数$\\alpha: E \\to \\Sigma$将边与概率标签相关联，其中每个标签表示模糊测试器通过该分支的概率。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:5:3","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"6 Design and Implementation 在本节中，我们将介绍 DigFuzz 的系统设计和实现细节。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"6.1 System Overview 图3显示了DigFuzz的概述。它由三个主要部分组成：1）模糊器; 2）$MCP^3$模型; 3）符号执行器。 Fig. 3: Overview of DigFuzz 我们的系统利用流行的现成模糊器，American Fuzzy Lop（AFL）[47]作为模糊测试组件，并在 angr [38]之上构建了一个符号执行器，这是一个开源符号执行引擎，与 Driller 相同[39]。 DigFuzz 中最重要的组件是$MCP^3$模型。该组件执行execution sampling，构造基于$MCP^3$的执行树，基于概率计算对路径进行优先级排序，并最终将优先路径馈送到 concolic 执行器。 DigFuzz 通过使用初始种子输入启动测试。只要模糊测试器生成输入，$MCP^3$模型就会执行execution sampling以收集覆盖率统计信息，这些统计信息指示采样期间每个分支被覆盖的次数。同时，它还通过跟踪分析构建基于$MCP^3$的执行树，并使用从覆盖统计计算的概率标记树的所有分支。一旦构造了树并且路径用概率标记，则$MCP^3$模型优先考虑树中的所有遗漏路径，并识别具有最低概率执行的路径。 由于为了简化路径约束，符号执行同时在具体值和符号值上执行程序，一旦一个被优先的未遗漏路径被识别，$MCP^3$模型还会确定一个相应的输入，该输入可以引导符号执行达到遗漏的路径。也就是说，通过将输入作为具体值，符号执行器可以沿着遗漏路径的前缀执行程序，生成并收集符号路径约束。当到达遗漏分支时，它可以通过将路径前缀的约束与到达该遗漏分支的条件相结合来生成错过路径的约束。最后，concolic executor通过解决路径约束生成遗漏路径的输入，并将生成的输入反馈给模糊器。同时，它还通过符号执行期间已探索的路径更新执行树。通过利用来自符号执行的新输入，模糊器将能够深入探索、扩展代码覆盖并更新执行树。 总之，DigFuzz 迭代工作。在每次迭代中，$MCP^3$模型通过对模糊器保留的所有输入的跟踪分析来更新执行树。然后，该模型使用执行样本的覆盖统计为每个分支标记其概率。之后，$MCP^3$模型对所有遗漏路径进行优先排序，并选择具有最低执行概率的路径进行符号执行。符号执行器将为跟踪中的遗漏分支生成输入，将通过符号执行期间已探索的路径更新执行树。完成这些步骤后，DigFuzz 将进入另一轮迭代。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:1","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"6.2 Execution Sampling DigFuzz 需要进行随机抽样来使用蒙特卡罗方法计算概率[35]。基于模糊器的性质就是生成随机输入，我们将模糊过程视对整个程序状态空间的随机抽样过程。由于模糊测试的高吞吐量，生成的样本数量将很快变得足够大，具有统计意义，这由三个规则定义[43]，其中当样本数大于30时，从0到$3/n$的区间是95%的置信区间。 基于这一观察，我们提出了执行抽样的算法（Algorithm 1）。该算法接受3个输入并在 $HashMap$ 中生成 coverage 统计信息。 算法1的3个输入 1）目标二进制$P$； 2）模糊测试器$Fuzzer$； 3）存储在$Set_{inputs}$中的初始种子 给定这3个输入，算法在模糊测试过程中进行迭代抽样。 $Fuzzer$使用$P$和$Set_{inputs}$以生成新输入 $Set_{NewInputs}$（Ln.7）。 然后，对于 $NewInputs$ 中的每个输入，我们收集由$P$和$input$（Ln.9）确定的路径内的每个分支的覆盖统计信息，并进一步更新存储在$HashMap_{CovStat}$中的现有覆盖统计（Ln.11和12）。 最后，算法将$Set_{NewInputs}$合并到$Set_{inputs}$（Ln.15）并开始新的迭代。 Algorithm 1 Execution Sampling ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:2","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"6.3 Execution Tree Construction 如图3所示，DigFuzz 使用来自模糊器的运行时信息生成基于$MCP^3$的执行树。 Fig. 3: Overview of DigFuzz Algorithm 2的输入、输出 输入，也是Algorithm 1的输出： 1）目标二进制文件的控制流图$CFG$； 2）fuzzer 保留的输入$Set_{inputs}$； 3）覆盖统计$HashMap_{CovStat}$ 输出：基于$MCP^3$的执行树 $ExecTree$ Algorithm 2展示了树构建过程。算法主要分为两个步骤。 Step1：对 $Set_{inputs}$中的每个输入执行跟踪分析，提取相应的跟踪，然后将跟踪合并到 $ExecTree$ 中（Ln. 6到11） Step2：计算执行树中每个分支的概率（Ln. 12到16）。 为实现这一点，对于 $ExecTree$ 中的每个分支$b_{ri}$，我们通过检查 $CFG$（Ln. 13）提取其相邻分支$b_{rj}$（$b_{ri}$和$b_{rj}$共享包含条件检查的相同前继块）。 然后，算法利用方程1计算$b_{ri}$的概率（Ln. 14）。 之后，算法使用计算得到的概率标记执行树 $ExecTree$（Ln. 15）并输出新标记的 $ExecTree$。 Algorithm 2 Execution Tree Construction 为了避免执行树中潜在的路径爆炸问题，我们只对由模糊测试保留的种子输入执行跟踪分析。模糊器通常将那些具有新代码覆盖的突变输入视为进一步突变的种子。对这些保留的种子进行跟踪是一种有前景的方法，可以对探索的程序状态进行建模。对于沿着执行跟踪的每个分支，只要模糊测试器尚未覆盖相反分支，就标识为一个遗漏路径，该路径指的是与未覆盖的分支连接的跟踪前缀。换句话说，执行树不会包括一个相反分支尚未被覆盖的遗漏分支。 为了简化表示，我们提供了一个运行示例，它简化了CQE数据集[13]中的程序，代码如图4所示。漏洞由特定字符串保护，很难进行模糊检测。 图4.运行示例 图5示出了用于图4中的运行示例的基于$MCP^3$的执行树。每个节点表示一个基本块。每条边都是一个用概率标记的分支。可以观察到树中有2个trace（红色：$t1 =⟨b1，b2，b6，b12，b13，b7，b9，b11⟩$和蓝色：$t2 =⟨b1，b3，b4，b12，b14⟩$）。请注意，概率是通过多个执行样本计算的。在此示例中，我们为了简化呈现仅提供了两个跟踪。 图5：具有概率的执行树 ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:3","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"6.4 Probabilistic Path Prioritization 我们基于概率对路径进行优先排序。如方程2所示，路径被视为一个马尔可夫链，其概率是基于路径内所有分支的概率计算得出的。路径可以表示为一系列已覆盖的分支，每个分支都标记有其概率，该概率表示随机输入能够满足条件的可能性有多大。因此，我们利用马尔可夫链模型，将路径的概率看作是转换的概率序列。 算法3. DigFuzz中的路径优先排序 Algorithm 3的输入、输出 输入，也是Algorithm 2的输出：基于$MCP^3$的执行树$ExecTree$ 输出：$Set_{Prob}$，一组未探索（遗漏）的路径及其概率 Algorithm 3详细地呈现了这个算法。DigFuzz 将根据$Set_{Prob}$对这些 未探索（遗漏） 的路径进行进一步的优先排序，并将概率最低的路径提供给符号执行。该算法： 从执行树遍历开始。对于 $ExecTree$ 中每个跟踪上的每个分支$b_{ri}$，它首先提取相邻的分支$b_{rj}$（Ln. 5），然后收集沿给定跟踪未探索的路径（Ln. 6）。 然后，算法通过调用实现方程2的 $CalPathProb()$ 计算了未探索路径的概率，并将信息存储在 $Set_{Prob}$中。 最终，该算法生成$Set_{Prob}$，即每个跟踪的未探索路径及其概率。 得到$Set_{Prob}$后，我们将 按概率降序对未探索路径进行优先排序，并确定概率最低的路径供符号执行使用。 确定输入，引导 concolic 执行器优先探索概率最低的路径。 以图4中的程序为例。在图5中，未探索（遗漏）的分支显示为虚线。在构建了执行树并正确标记之后，使用 Algorithm 3来获取未探索的路径并计算这些路径的概率。我们可以观察到总共有4条未探索的路径，分别记为$P_1$、$P_2$、$P_3$和$P_4$。通过调用 $CalPathProb()$ 函数，这些未探索路径的概率如图中所示计算，其中概率最低的路径是$P_1$。为了引导 concolic 执行器探索$P_1$，DigFuzz将选择导致跟踪$〈b1, b2, b6, b12, b13, b7, b9, b11〉$的输入，并将此输入分配为 concolic 执行的具体值，因为此跟踪与未探索路径$P_1$共享相同的路径前缀$〈b1, b2, b6, b12, b13, b7, b9〉$。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:6:4","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"7 Discussion ","date":"2023-12-10","objectID":"/posts/digfuzz/:7:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"7.1 Threats to Validity 我们的实验结果基于论文中提供的有限数据集。已经努力在实际程序上评估 DigFuzz，但是当 Angr [38]遇到不支持的系统调用时，它无法对程序进行符号执行。因此，结果可能无法完全代表实际程序。对这些程序进行评估是必要的，以便就拟议技术在实践中的有效性得出结论。我们将把对真实世界程序的评估留作未来的工作。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:7:1","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"7.2 Limitations 首先，虽然DigFuzz中的“区别性调度”被设计为轻量级方法，但它仍然会产生一些运行时和内存消耗开销，包括收集模糊测试的运行时信息和构造执行树。但根据评估，可以看到对于模糊测试的吞吐量减少是可以忽略不计的。此外，由于树中的每个节点仅携带非常有限的信息，因此执行树的总内存消耗是非常易于管理的。 其次，由于DigFuzz仅估计模糊探测器的路径难度，但没有考虑约束求解的复杂性，所以挑选的路径收集到的约束可能是不可解的，这可能导致浪费整个符号执行循环。此外，可能导致漏洞的最有希望的路径也可能不是DigFuzz选择的最难的路径。这两个限制是由于我们找到正确的探索路径的模型。我们考虑将它们解决为未来的工作。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:7:2","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"8 Related Work 模糊测试 Fuzzing和符号执行 symbolic execution是程序测试的两种主流技术。许多先前的努力已经致力于改进它们[3]，[27]，[33]，[36]。 BuzzFuzz [17]利用动态污点标记来识别由可疑指令处理的输入字节。Dowser [20]采用反向工程技术来识别与可疑功能相关的输入字段。Vuzzer [34]利用控制流和数据流特征来准确确定何时以及如何变异这些输入。Skyfire [40]利用现有样本中的知识生成用于模糊测试程序的分布良好的种子输入。Angora [12]旨在通过解决路径约束而不使用符号执行来增加分支覆盖。T-Fuzz [32]首先允许模糊测试器在去除了无法绕过的健全性检查的转换程序上工作。作为辅助的后处理步骤，T-Fuzz 利用基于符号执行的方法来过滤掉假阳性。CollAFL [16]是一种基于覆盖率敏感的模糊测试解决方案，通过提供更准确的覆盖信息来减轻路径冲突。它还利用覆盖信息应用了三种新的模糊测试策略。Veritesting [1]通过采用静态符号执行来放大动态符号执行的效果，以解决路径爆炸问题。Mayhem [10]提出将在线和离线符号执行结合起来处理内存耗尽的问题。 DigFuzz 的主要贡献在于提出了一种更有效的策略，将模糊测试与符号执行结合起来。因此，模糊测试和符号执行的进展超出了我们的范围。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:8:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"8.1 Hybrid fuzzing system 大多数混合模糊测试系统遵循通过选择性符号执行增强模糊测试的观察[9]，[27]，[38]，[40]。TaintScope [40]部署动态污点分析来识别校验点，然后应用符号执行生成满足校验和的输入。T-Fuzz [31]首先允许模糊测试器在经过去除健全性检查的转换程序上工作，然后利用基于符号执行的方法来过滤出假阳性。SAVIOR [13]提出了一种基于漏洞的混合模糊测试系统。它优先考虑具有更高潜力导致发现更多漏洞的种子进行合符号执行。此外，它在合符号执行期间启用了安全检查。HFL [25]将模糊测试与符号执行相结合，以解决内核特定的模糊测试挑战。PANGOLIN [23]设计了基于多面体路径抽象的增量混合模糊测试，该抽象在合符号执行阶段保留了探索状态，并允许对现有技术进行更有效的变异和约束求解。与这些技术相比，DigFuzz 通过基于覆盖统计量量化模糊测试探索路径的难度来优先考虑路径。 另一种混合模糊测试系统是将符号执行视为输入生成或路径选择的引导者。Pak [30]提出了一种混合模糊测试系统，将符号执行应用于收集路径约束，然后系统生成符合路径谓词并过渡到模糊测试器的输入。DeepFuzz [5]采用概率符号执行为程序路径分配概率，然后利用这些概率来引导模糊测试中的路径探索。 MDPC [42]提出了一种理论框架，用于最佳的符号测试。它基于程序路径的概率和约束求解的成本来定义最优策略，这与我们识别路径概率的想法类似。与使用重量级技术来计算模糊测试和符号执行成本的MDPC [42]相比，我们的模型使用覆盖率统计来计算概率，这更加轻巧和实用。 QSYM [46]使用动态二进制转换将符号仿真与本机执行集成在一起。 它还减轻了传统的严格健全性要求，减轻了传统的严格健全性要求，使其可扩展到现实世界的程序。 主要重点是使其可以扩展到真实世界的程序。 主要重点是使其可以扩展到真实世界的程序。 有选择地只派遣最难的工作的主要焦点。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:8:1","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"8.2 Path prioritization in symbolic execution 路径优先化有望减轻动态符号执行中的路径爆炸问题。代表性研究包括启发式技术和声音程序分析技术[9]。这些启发式方法包括使用控制流图来指导探索，基于频率和基于随机的技术[6] - [8]。最近，采用路径优先级与进化搜索相结合，其中定义适应度函数来指导符号执行[2]。与这些路径探索技术相比，DigFuzz中的路径优先级是将具有概率的路径优先化为模糊测试的难度。据我们所知，我们是第一个研究混合模糊测试系统中的路径优先级问题的人。 定向符号执行还使用路径优先级来达到目标。这些技术旨在为目标语句或分支搜索可行路径[37]，[45]。与有向符号执行技术相比，DigFuzz中的路径优先级是识别用于执行的目标路径，而不是为给定目标搜索可行路径。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:8:2","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"8.3 Seed scheduling in fuzzing 种子选择在模糊测试中起着重要作用，并且已经提出了一些研究来通过优先考虑种子投入来改进种子调度[4]，[11]，[44]。 Woo等人。 [44]模型黑盒模糊作为一个多臂强盗问题，其中种子的能量是根据它是否在任何先前的模糊迭代中暴露出崩溃来计算的。 AFLfast [4]通过为AFL较少采用的输入分配更多能量来改进AFL的种子选择策略。这些种子调度技术背后的基本见解是搜索变异执行更有可能发现新程序状态的种子。在我们未来的工作中，我们计划设计调度技术，以便使用难以探索的路径卸载模糊器。 测试用例优先级尝试以提高检测到错误率的方式重新排序测试用例[21]，[22]，[24]，[26]，[28]。 本研究中的路径优先级是为了获得最有可能阻塞模糊器的错过路径。 搜索算法也与基于搜索的测试优先级和其他基于搜索的软件工程密切相关[23]。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:8:3","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":["科研"],"content":"9 Conclusion 指出了一些最先进的混合模糊测试系统中采用的“需求启动”和“最优切换”策略中的一些根本限制。 进一步提出了一种discriminative dispatch策略：通过设计一个基于Monte Carlo的概率路径优先模型来更好地利用concolic execution的能力，以量化每条路径的难度。 实现了原型系统DigFuzz。评估结果显示，与最先进的混合模糊测试系统相比，DigFuzz 对于增加代码覆盖和发现漏洞的数量贡献更大。 ","date":"2023-12-10","objectID":"/posts/digfuzz/:9:0","tags":["论文","符号执行","模糊测试"],"title":"Digfuzz工具论文调研","uri":"/posts/digfuzz/"},{"categories":null,"content":" /** * 作为程序员，总该在互联网上留下一点痕迹。 * 「Talk is cheap. Show me the code.」 * 养猪 @since 2018-02-06 */ class Blog { constructor(name, author, url) { this.name = name; this.author = author; this.url = url; } } const site = new Blog('Leehow的小站', 'Leehow', 'https://www.haoyep.com'); ","date":"2023-12-07","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于我 玩会吧，别真学会了 戒骄戒躁，久久为功 👨‍💻 一名C/C++工程师 👨‍💼 可能要去享受福报 📝 但是要写Go代码 ","date":"2023-12-07","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["科研"],"content":"本文介绍适用于多路径任务的多核系统pWCET分析工具——PTATM的初始化工作，如内核、环境变量等。","date":"2023-11-18","objectID":"/posts/ptatm-1/","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"本文介绍适用于多路径任务的多核系统pWCET分析工具——PTATM的初始化工作，如内核、环境变量等。 本文介绍 PTATM 的初始化工作，如内核、环境变量等。 PTATM简介 PTATM结合了多路径任务分段方法、共享Cache竞争下的任务段信息收集方法以及分段任务的pWCET分布生成方法，是一种适用于多路径任务的多核系统pWCET分析工具。 ","date":"2023-11-18","objectID":"/posts/ptatm-1/:0:0","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"1 系统环境 PTATM 开发时的环境为： 环境 配置 操作系统 Ubuntu 22.04 内核版本 5.19.0-32-generic 因此，理论上只要是5.19.0-x内核版本的 Ubuntu22.04 即可。使用uname -r命令可以查看当前系统版本号。下图表示当前系统的内核的版本是5.19.0-50-generic，满足运行条件，可以跳过本节系统环境配置。 image.png ","date":"2023-11-18","objectID":"/posts/ptatm-1/:1:0","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"1.1 查看系统已安装内核 dpkg --get-selections | grep linux-image | grep -v deinstall 使用上面的命令查看系统已经安装的所有内核版本。如果有5.19.0-x内核版本，跳到1.3 更新 grub。 image.png ","date":"2023-11-18","objectID":"/posts/ptatm-1/:1:1","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"1.2 更换 Linux 内核 如果内核版本不是5.19.0-x，则需要更换内核。使用下面的命令查看可以安装的内核版本。 apt-cache search linux-image-5.19.* | grep generic image.png 选择图中最后一个内核版本linux-image-5.19.0-50-generic安装： sudo apt-get install linux-image-5.19.0-50-generic sudo apt-get install linux-headers-5.19.0-50-generic linux-modules-extra-5.19.0-50-generic 如果要安装其他版本的内核，记得把上面命令中的5.19.0-50-generic改成对应的版本。 ","date":"2023-11-18","objectID":"/posts/ptatm-1/:1:2","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"1.3 更新grub 还是假设要更换到5.19.0-50-generic内核版本。 # 将 5.19.0-50-generic 替换你需要的version sudo update-initramfs -u -k 5.19.0-50-generic 修改 grub 使5.19.0-50-generic为默认启动项 sudo nano /etc/default/grub 将GRUB_DEFAULT一项修改为： \"Advanced options for Ubuntu\u003eUbuntu, with Linux 5.19.0-50-generic\" 同理，记得把5.19.0-50-generic替换你需要的 version image.png 更新 grub，然后重启。查看内核版本是否切换成功。 # 更新 grub sudo update-grub # 重启 sudo reboot # 查看当前内核版本 uname -r ","date":"2023-11-18","objectID":"/posts/ptatm-1/:1:3","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"2 安装 perf 使用下面的命令安装当前内核版本的 perf： sudo apt-get install linux-tools-common -y sudo apt-get install linux-tools-\"$(uname -r)\" -y sudo apt-get install linux-cloud-tools-\"$(uname -r)\" -y sudo apt-get install linux-tools-generic -y sudo apt-get install linux-cloud-tools-generic -y ","date":"2023-11-18","objectID":"/posts/ptatm-1/:2:0","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"3 Python 环境 使用 Python3，运行时如果发现有依赖包没安装，自行使用pip3 install \u003cmodule\u003e安装缺少的依赖包。 ","date":"2023-11-18","objectID":"/posts/ptatm-1/:3:0","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["科研"],"content":"4 环境变量 在PTATM的本地文件夹中打开终端，输入pwd查看当前目录位置： image.png 之后，每次需要运行PTATM时，先在终端导入这个环境变量： export PTATM=/home/pzy/project/PTATM_backup 设置PTATM目录 ","date":"2023-11-18","objectID":"/posts/ptatm-1/:4:0","tags":["PTATM","Linux","pwcet"],"title":"PTATM（一）：初始化工作","uri":"/posts/ptatm-1/"},{"categories":["blog"],"content":"本文介绍了如何使用 hugo 和 Github Pages 免费搭建个人博客，并使用自定义域名访问。","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"本文介绍了如何使用 hugo 和 Github Pages 免费搭建个人博客，并使用自定义域名访问。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:0:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"1 前提 默认本地已安装了 Git、VSCode。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:1:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"2 hugo 配置 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:2:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"2.1 安装 Hugo 推荐使用 Hugo extended 版本 2.1.1 预构建的二进制文件 访问最新版本页面，然后向下滚动到Assets部分。选择对应平台下载。 hugo发布页面 解压到某个目录，然后将该目录添加到环境变量中： 添加hugo到环境变量 2.1.2 通过包管理器（Windows） 2.1.2.1 Chocolatey Chocolatey 是一个免费的开源 Windows 包管理器。这将安装 Hugo 的扩展版本： choco install hugo-extended 2.1.2.2 Scoop Scoop 是适用于 Windows 的免费开源包管理器。这将安装 Hugo 的扩展版本： scoop install hugo-extended 2.1.2.3 Winget Winget 是 Microsoft 的官方免费开源 Windows 包管理器。这将安装 Hugo 的扩展版本： winget install Hugo.Hugo.Extended ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:2:1","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"2.2 创建 Hugo 网站 通过上述操作安装 hugo 程序后，就可以通过 hugo new site 命令进行网站创建、配置与本地调试了。 选择一个本地文件夹作为根目录，右键——Git Bash Here，输入下面的命令 hugo new site \u003csite-name\u003e hugo new site 命令进行网站创建 注：后续命令未经说明，均在 Git Bash 中的 E:\\Workspace\\blog 目录下运行 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:2:2","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"2.3 主题 2.3.1 安装 推荐使用 FixIt 主题。 初始化你的项目目录为一个空的 Git 存储库，将 [FixIt][fixit] 主题克隆到 themes 目录中，将其作为 [Git 子模块][git-submodule] 添加到您的项目中。 git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 如果你想使用 dev 分支上的版本，可以使用以下命令： git submodule add -b dev https://github.com/hugo-fixit/FixIt.git themes/FixIt 或者将子模块分支从 master 切换到 dev： git submodule set-branch -b dev themes/FixIt 2.3.2 基础配置 用VScode打开E:\\Workspace\\blog文件夹，用下面的内容覆盖hugo.toml文件。并自行修改baseURL和title。 其中，baseURL为你的github账户名.github.io，也可以像我一样设置自定义域名。记得逐项修改为你的配置。 # ===================================================================================== # It's recommended to use Alternate Theme Config to configure FixIt # Modifying this file may result in merge conflict # ===================================================================================== # ------------------------------------------------------------------------------------- # Hugo Configuration # See: https://gohugo.io/getting-started/configuration/ # ------------------------------------------------------------------------------------- # 网站标题 title = \"Leehow的小站\" # Hostname (and path) to the root baseURL = \"https://www.haoyep.com/\" # baseURL = \"https://leegical.github.io/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = [\"FixIt\"] # determines default content language [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # default amount of posts in each pages paginate = 12 # copyright description used only for seo schema copyright = \"\" # whether to use robots.txt enableRobotsTXT = true # whether to use git commit log enableGitInfo = true # whether to use emoji code enableEmoji = true # ------------------------------------------------------------------------------------- # Menu Configuration # See: https://fixit.lruihao.cn/documentation/basics/#menu-configuration # ------------------------------------------------------------------------------------- [menu] [[menu.main]] identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"文章\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 # FixIt 0.2.14 | NEW add user-defined content to menu items [menu.main.params] # add css class to a specific menu item class = \"\" # whether set as a draft menu item whose function is similar to a draft post/page draft = false # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item icon = \"fa-solid fa-archive\" # FixIt 0.2.16 | NEW set menu item type, optional values: [\"mobile\", \"desktop\"] type = \"\" [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 2 [menu.main.params] icon = \"fa-solid fa-th\" [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-tags\" # ------------------------------------------------------------------------------------- # Theme Core Configuration # See: https://fixit.lruihao.cn/documentation/basics/#theme-configuration # ------------------------------------------------------------------------------------- [params] # FixIt 0.2.15 | CHANGED FixIt theme version version = \"0.2.X\" # e.g. \"0.2.X\", \"0.2.15\", \"v0.2.15\" etc. # 网站描述 description = \"\" # 网站关键词 keywords = [\"程序员\"] # 网站默认主题样式 [\"light\", \"dark\", \"auto\"] defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"sha256\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片，用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 开启 PWA 支持 enablePWA = true # 是否自动显示外链图标 externalIcon = false # 默认情况下，FixIt 只会在主页的 HTML 头中注入主题元标记 # 您可以将其关闭，但如果您不","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:2:3","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"2.4 创建你的第一篇文章 以下是创建新文章的命令： hugo new posts/文章标题.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数。 你可以在VScode中随意编辑文章。 创建出的新文章 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:2:4","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"2.5 本地调试 hugo serve -D --disableFastRender 本地调试 浏览器中打开 http://localhost:1313/，就能看到网站效果。 网站效果 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:2:5","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"3 Github ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:3:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"3.1 在 Windows 上创建 SSH 密钥并将其添加到 GitHub 3.1.1 Windows 端生成 SSH 密钥 使用 Git Bash 或命令行打开终端窗口，输入以下命令。记得把your_email@example.com改成你自己的邮箱地址。 ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 按照提示键入您想要保存密钥的文件名和路径，或使用默认设置。 生成SSH密钥 接下来，系统将生成一个随机字符串作为密钥密码。此处可以选用默认密码以便于不需要输入密码进行 SSH 登录。进入生成密钥的文件夹，查看密钥： 查看密钥 3.1.2 添加到 GitHub 登录到 GitHub 账户，并转到“Settings”（设置）中的“SSH and GPG keys”（SSH 和 GPG 密钥）页面。 点击“New SSH key”（新建 SSH 密钥），填写标题和密钥的内容。 新建 SSH 密钥 打开id_rsa.pub公钥文件 (即你在生成的时候保存的文件) ，将其内容复制到 GitHub 的 “Key” 字段中。 最后，点击“Add SSH key” （添加 SSH 密钥），完成密钥添加。 添加 SSH 密钥 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:3:1","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"3.2 创建 blog 仓库 用于存储博客源文件，也就是刚才的本地项目文件。 在 GitHub 网站上登录你的账号，然后点击页面右上角的加号图标，选择 “New repository”（新建仓库）。 在 “Initialize this repository with”（使用以下方式初始化仓库）部分，选择 “Add a README file”（添加一个 README 文件）选项。 暂存并提交现有文件 git add . git commit -m \"init blog files\" 点击 “Create repository”（创建仓库）按钮，完成 GitHub 仓库的创建。 创建 blog 仓库 将本地仓库与远程 GitHub 仓库关联起来。在项目目录中打开 Git Bash，执行以下命令，将 \u003cremote-url\u003e 替换为你的 GitHub 仓库的远程 URL： git remote add origin \u003cremote-url\u003e 例如： git remote add origin https://github.com/your-username/your-repository.git 将本地代码推送到远程仓库的 main 分支。执行以下命令： git push -u origin main 这将把本地的代码推送到远程仓库的 main 分支，并将其设置为默认上游分支。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:3:2","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"3.3 创建 Github Pages 公开仓库 用于实际展示博客。 创建新仓库 创建新Github Pages仓库 Repository name 这里一定要填 [你的github账号].github.io。你的github账号必须小写字母。仓库可见性设为Public。选择“使用 README 初始化此存储库”。 新建Github Pages仓库 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:3:3","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"3.4 上传页面 3.4.0.1 进入项目根目录，执行： hugo 执行后，站点根目录下会生成一个 public 文件夹，该文件下的内容即 Hugo 生成的整个静态网站。每次更新内容后，将 pubilc 目录里所有文件 push 到 GitHub Pages 所在的仓库即可。 3.4.0.2 上传代码至 master 首次使用的时候要执行以下命令： cd public git init git remote add origin https://github.com/leegical/leegical.github.io.git # 将本地目录链接到远程服务器的代码仓库 git add . git commit -m \"[介绍，随便写点什么，比如日期]\" git push -u origin master 3.4.0.3 更改 Pages 展示分支 进入 Github Pages 仓库的Setting-Pages，把Branch修改为master，点击 save。 修改发布Branch 稍等几分钟即可通过[你的github账号].github.io来访问博客站点了，和hugo serve -D本地调试完全一致。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:3:4","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"3.5 Github Action 自动发布 通过上述命令我们可以手动发布我们的静态文件，但还是有以下弊端： 发布步骤还是比较繁琐，本地调试后还需要切换到 public/ 目录进行上传 无法对博客 .md 源文件进行备份与版本管理 可以通过官方提供的 GitHub Action 进行 CI 自动发布。 3.5.1 增加 action 配置文件 回到 blog 仓库的本地文件夹，新增.github/workflows/deploy.yml mkdir .github mkdir .github/workflows touch .github/workflows/deploy.yml 新建deploy.yml 用 vscode 编辑 deploy.yml 的内容，参考如下： name: deploy on: push: pull_request: workflow_dispatch: schedule: # Runs everyday at 0:00 AM - cron: \"0 0 * * *\" jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \"latest\" extended: true - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: leegical/leegical.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 注意：EXTERNAL_REPOSITORY要修改为 Github Pages 的链接 deploy.yml 提交变更到 Github： git add . git commit -m \"add action config\" git push 提交变更 3.5.2 设置 action 变量 进入 Github tokens ，点击Generate new token——Generate new token (classic) Generate new token Note：随便写 Expiration：No expiration Select scopes：只勾选 repo 设置属性 拉到最下面，点击生成。 生成密钥 注意生成的 token 只会显示这一次，形如 ghp_xxxxxxxxxx，点击复制。 回到 blog 仓库——Setting，新建仓库密钥 新建仓库密钥 Name：PERSONAL_TOKEN Secret：填刚才复制的密钥 粘贴密钥 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:3:5","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"4 自定义博客域名 你的github账户名.github.io的网址在国内访问速度较慢，为博客设置一个自定义域名可以有效加快速度。以本博客为例，要设置的自定义域名为：haoyep.com。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:4:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"4.1 Cloudflare 配置 使用 Cloudflare 托管域名，这一点教程很多，跟着做就行。 托管域名 在 DNS 配置中，新增一条 CNAME 解析记录到你的github账户名.github.io，不启用代理。 新增一条 CNAME 解析记录 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:4:1","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"4.2 hugo 配置 在 static 中添加 CNAME 文件，内容为自定义域名为 haoyep.com。 CNAME 文件 hugo.toml 修改 baseURL 为自定义域名为 haoyep.com。 baseURL 提交到 Github 仓库 hugo git add . git commit -m \"Create CNAME\" git push ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:4:2","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"4.3 Github Pages 仓库配置 为自定义域名启用 SSL 证书。 Settings——Pages——Custom domain，勾选 Enforce HTTPS。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:4:3","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"5 总结 以上整个环境部署好之后，接下来的常用命令就是以下几个： 站点目录下，新建文章，执行： hugo new posts/文章名.md 使用VScode编辑文章内容或修改，包括修改主题之类的。在本地进行调试: hugo serve -D --disableFastRender 修改完成，确定要上传到 GitHub 上后，站点目录下执行： hugo 进行编译，没错误的话修改的内容就顺利同步到public下了，然后执行提交命令： git add . git commit -m \"随便写点提交信息\" git push 稍等片刻，github action 执行完毕，页面就会更新了。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:5:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"6 选择和配置 Hugo 主题 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:6:0","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"6.1 网站 logo 在本地项目文件夹static中添加2个方形 png 图片，命名为avatar.png、logo.png，作为网站头像和 logo： 网站头像和 logo 并修改hugo.toml文件中对应的参数。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:6:1","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["blog"],"content":"6.2 网站小图标 我是在这个网站上生成自己的 svg 小图标。然后把文件下载后，放在博客的static目录中。 网站svg图标 前往这个网站，生成下面的文件： apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 然后放在 /static 目录。 并修改hugo.toml文件中对应的参数。 记得提交更改 git add . git commit -m \"修改主题\" git push 稍等片刻，github action 执行完毕，页面就会更新了。 ","date":"2023-11-17","objectID":"/posts/windows-hugo-blog-github/:6:2","tags":["git","hugo"],"title":"Windows下使用hugo和Github Pages配置博客","uri":"/posts/windows-hugo-blog-github/"},{"categories":["科研"],"content":"个人 zotero 折腾过程记录与配置、插件分享。","date":"2023-11-10","objectID":"/posts/zotero-config/","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"个人 zotero 折腾过程记录与配置、插件分享。 ","date":"2023-11-10","objectID":"/posts/zotero-config/:0:0","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"1 前言 最开始阅读文献是使用readpaper 平台，在线翻译、做笔记、文献管理都很方便，具体使用可以参考同济子豪兄和官方 ReadPaper 保姆级教程。 但随着科研深入，readpaper 的文献管理功能逐渐跟不上了，而且很多文献没有 PDF 文件，需要自己下载后上传。 经过研究发现，相比 Endnote，zotero 功能够用，而且开源。通过插件也可以实现 readpaper 的在线翻译功能，配合 snipaste 软件可以截图固定，非常 nice！ 【注】本文参考了知乎专栏。 ","date":"2023-11-10","objectID":"/posts/zotero-config/:1:0","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"2 下载安装 ","date":"2023-11-10","objectID":"/posts/zotero-config/:2:0","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"2.1 蓝奏云 官网访问困难的，可以点击蓝奏云链接下载，更新于2023-11-8 密码:2333 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:2:1","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"2.2 官网下载 2.2.1 本体Zotero 下载 Zotero 官网访问速度慢的，建议使用蓝奏云中Zotero-6.0.18_setup.exe进行安装。 2.2.2 浏览器插件：Zotero Connector下载 2.2.3 翻译器：Zotero translators_CN下载 Zotero 官网访问速度慢的，建议下载蓝奏云中的translators.zip。 2.2.4 插件 zotero 官方插件下载地址： https://www.zotero.org/support/plugins zotero 中文社区推荐插件： https://plugins.zotero-chinese.com/#/ 访问速度慢的，建议下载蓝奏云中插件.zip，压缩包里包含本文全部插件。 技巧 强烈建议下载Zotero 插件合集，这个插件可以帮你自动管理、更新zotero插件。 image.png 2.2.4.1 插件安装 方法一： 打开【Zotero】 点击【工具】—【插件】 点击右上角【⚙】—【Install Add-on From File…】—选中需要安装的插件（部分插件不适用该方法） 安装完毕后重启【Zotero】 image image image image image 方法二： 打开【Zotero】 点击【工具】—【插件】 将需要安装的插件【拖动】至该页面 安装完毕后重启【Zotero】 按需启用插件。我的插件启用情况如下： image ","date":"2023-11-10","objectID":"/posts/zotero-config/:2:2","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3 基础配置 打开【Zotero】—【编辑】—【首选项】 ","date":"2023-11-10","objectID":"/posts/zotero-config/:3:0","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.1 高级 3.1.1 更改数据存储位置 安装完 zotero 后，第一件事就是更改数据存储位置。因为以后要存 PDF 文献，所以建议放在一个存储空间充裕的地方。改完位置后点击 OK 保存，重启 zotero 生效。 image 3.1.2 添加搜索引擎 【Zotero】—【编辑】—【首选项】—【高级】— 文件和文件夹 —【打开数据文件夹】 image 在 locate 文件夹中打开engines.json文件 image 编辑engines.json文件，将里面的内容全选删除，粘贴为以下内容并保存。 [ { \"_name\": \"熊猫学术\", \"_alias\": \"panda\", \"_description\": \"谷歌学术镜像\", \"_icon\": \"https://sc.panda985.com/static/base/images/favicon.ico\", \"_hidden\": false, \"_urlTemplate\": \"https://sc.panda985.com/scholar?hl=zh-CN\u0026as_sdt=0%2C5\u0026q={z:title}\", \"_urlParams\": [], \"_urlNamespaces\": { \"rft\": \"info:ofi/fmt:kev:mtx:journal\", \"z\": \"http://www.zotero.org/namespaces/openSearch#\", \"\": \"http://a9.com/-/spec/opensearch/1.1/\" }, \"_iconSourceURI\": \"https://sc.panda985.com/static/base/images/favicon.ico\" }, { \"_name\": \"CNKI新版\", \"_alias\": \"CNKI\", \"_description\": \"CNKI新版\", \"_icon\": \"https://kns.cnki.net/favicon.ico\", \"_hidden\": false, \"_urlTemplate\": \"https://kns.cnki.net/kns8s/defaultresult/index?dbcode=SCDB\u0026kw={z:title}\u0026korder=SU\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\", \"\": \"http://a9.com/-/spec/opensearch/1.1/\" }, \"_iconSourceURI\": \"https://kns.cnki.net/favicon.ico\" }, { \"_name\": \"南京师范大学图书馆\", \"_alias\": \"南京师范大学图书馆\", \"_description\": \"南京师范大学图书馆\", \"_icon\": \"http://lib.njnu.edu.cn/images/njnulogo.png\", \"_hidden\": false, \"_urlTemplate\": \"http://opac.njnu.edu.cn/opac/openlink.php?strSearchType=title\u0026match_flag=forward\u0026historyCount=1\u0026strText={z:title}\u0026doctype=ALL\u0026with_ebook=on\u0026displaypg=20\u0026showmode=list\u0026sort=CATA_DATE\u0026orderby=desc\u0026location=ALL\u0026csrf_token=%29lW1vOCx%7B%2F\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"http://lib.njnu.edu.cn/images/njnulogo.png\" }, { \"_name\": \"豆瓣读书\", \"_alias\": \"豆瓣读书\", \"_description\": \"豆瓣读书\", \"_icon\": \"https://book.douban.com/favicon.ico\", \"_hidden\": false, \"_urlTemplate\": \"https://search.douban.com/book/subject_search?search_text={z:title}\u0026cat=1001\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"https://book.douban.com/favicon.ico\" }, { \"_name\": \"国学数典\", \"_alias\": \"国学数典\", \"_description\": \"国学数典\", \"_icon\": \"https://bbs.ugxsd.com/static/image/common/logo_gxsd.png\", \"_hidden\": false, \"_urlTemplate\": \"https://bbs.ugxsd.com/search.php?mod=forum\u0026searchid=2634\u0026orderby=lastpost\u0026ascdesc=desc\u0026searchsubmit=yes\u0026kw={z:title}\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"https://bbs.ugxsd.com/static/image/common/logo_gxsd.png\" }, { \"_name\": \"读秀图书\", \"_alias\": \"读秀图书\", \"_description\": \"读秀图书\", \"_icon\": \"https://book.duxiu.com/images/small0408.jpg\", \"_hidden\": false, \"_urlTemplate\": \"https://book.duxiu.com/search?Field=all\u0026channel=search\u0026sw={z:title}\u0026ecode=utf-8\u0026edtype=\u0026searchtype=\u0026view=0\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"https://book.duxiu.com/images/small0408.jpg\" }, { \"_name\": \"Obsidian\", \"_alias\": \"Obsidian\", \"_description\": \"在Obsidian中搜索\", \"_icon\": \"https://obsidian.md/favicon.ico\", \"_hidden\": false, \"_urlTemplate\": \"obsidian://search?vault=Zotero\u0026query={z:title}\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\" }, \"_iconSourceURI\": \"https://obsidian.md/favicon.ico\" }, { \"_name\": \"Open Notes\", \"_alias\": \"Open Notes\", \"_description\": \"笔记路径放在Rights字段\", \"_icon\": \"https://figurebed-iseex.oss-cn-hangzhou.aliyuncs.com/img/20201017133213.png\", \"_hidden\": false, \"_urlTemplate\": \"file:///{z:rights}\", \"_urlParams\": [], \"_urlNamespaces\": { \"z\": \"http://www.zotero.org/namespaces/openSearch#\", \"\": \"http://a9.com/-/spec/opensearch/1.1/\" }, \"_iconSourceURI\": \"https://figurebed-iseex.oss-cn-hangzhou.aliyuncs.com/img/20201017133213.png\" }, { \"_name\": \"TOC of Notes\", \"_alias\": \"TOC of Notes\", \"_description\": \"打开所有笔记的目录\", \"_icon\": \"https://figurebed-iseex.oss-cn-hangzhou.aliyuncs.com/img/20201025110921.png\", \"_hidden\": false, \"_urlTemplate\":","date":"2023-11-10","objectID":"/posts/zotero-config/:3:1","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.2 常规 我的常规配置： image ","date":"2023-11-10","objectID":"/posts/zotero-config/:3:2","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.3 同步 我采用了坚果云进行同步。 image 3.3.1 坚果云使用 注册【坚果云账户】 点击右上角【用户名】—进入【账户信息】 进入【安全选项】 向下拖动进入【第三方应用管理】—点击【添加应用】—输入应用名【zotero】 这里【示例】中的【服务器地址】、【账户】和【密码】（应用密码）即是【WebDAV】需填写的【URL】、【用户名】和【密码】 image 返回【Zotero】—【首选项】—【同步】 将【同步文献库的附件】改为【WebDAV】，输入【URL】、【用户名】和【密码】，点击【验证服务器】成功即可。 image 【注】坚果云验证失败看这里。 ","date":"2023-11-10","objectID":"/posts/zotero-config/:3:3","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"3.4 引用 3.4.1 zotero 官方7714样式 点击【获取更多样式】 搜索【7714】即可安装国标引用样式。注意有1987、2005和2015三个时间，note、author-date 和 numeric 三个格式，鼠标悬停即可【预览】样式。 image 3.4.2 比较贴近东北大学要求的7714样式 zotero 官方的7714样式存在一些问题，如不能区分中英文文献，导致引用英文文献也是“等”，而不是“et al”。github 上的Chinese-STD-GB-T-7714-related-csl仓库（Gitee）提供7714 2015的官方样式及众多修改版，其中002gb样式比较符合东北大学的要求，除了网络文献的引用顺序有点差异。 image 从仓库或者前文的蓝奏云链接中下载样式 点击+号，选中已下载的002 csl 样式，打开。 会提示***.csl不是一个有效的 CSL 1.0.2 样式文件，你可能不能和Zotero一起正常工作，不用管，点击 OK 继续导入。 image 点击 OK 保存退出首选项。然后重新打开【编辑】—【首选项】— 【导出】— 项目格式，选择为7714 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:3:4","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4 插件配置 下面这些插件都建议在中文插件网站下载。注意要下载对应 zotero 版本的插件，本文中下载的都是 zotero6的插件。 ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:0","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.1 Zotero 插件合集 点击工具栏中的[ 插件市场 ] ，自动管理、更新、添加 Zotero 插件 插件市场 ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:1","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.2 ZotFile 4.2.1 功能 自动修改附件名 提取附件中的笔记 【Attaching New Files】—添加新附件 【Send to Tablet】—多端同步阅读 4.2.2 配置 点击【工具】—进入【Zotfile 首选项】 【General Settings】 - 【Source Folder For Attaching New Files】：自动抓取新附件建议设置为【浏览器等默认下载地址】 - 【Location of Files】：附件本地存储地址建议选择【Attach stored copy of files(s)】，存储在 Zotero 的根目录下 image 【Send to Tablet】：若非本地存储空间不够，不建议使用 具体设置可参考此处 【Renaming Rules】和【Advanced Settings】：可自行修改 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:2","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.3 ZoteroQuickLook Github仓库 4.3.1 功能 按【空格】实现快速预览 4.3.2 配置 下载【QuickLook】本体安装，记住安装目录 Windows：QuickLook for Windows 【Zotero】—【编辑】—【首选项】—— 【高级】—— 【设置编辑器】，搜索extensions.zoteroquicklook.customviewcommand，双击将里面的内容修改为QuickLook.exe的文件路径 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:3","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.4 茉莉花-Jasminum Github仓库 4.4.1 功能 拆分或合并 Zotero 中条目作者姓和名 根据知网上下载的文献文件来抓取引用信息（根据文件名） 添加中文 PDF/CAJ 时，自动拉取知网数据，该功能默认关闭。需要到设置中开启，注意添加的文件名需要含有中文，全英文没有效果（根据文件名） 为知网的学位论文 PDF 添加书签 更新中文翻译器 4.4.2 配置 如何自动为知网学位论文添加【书签】 从知网下载的 PDF 格式【学位论文】不显示书签（CAJ 格式显示），【茉莉花】提供自动添加功能。要使用添加【书签】功能需要下载【PDFtk Server】，文件见网盘。 下载并安装【PDFtk Server】，蓝奏云里有 打开【Zotero】—进入【首选项】—进入【茉莉花】 选择【PDFtk Server】的路径，最后须选择 bin image ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:4","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.5 zotero citation update 4.5.1 功能 更新文献被引用数 4.5.2 配置 列标题启用【存档位置】 列标题启用【存档位置】 使用：工具——更新引用 更新引用 ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:5","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.6 Zotero PDF Translate 各翻译引擎 api 格式设置详见github 各翻译引擎 api中文申请教程 【注】不想看文字的也可以看这个 up 的视频讲解，演示了如何申请小牛 api 4.6.1 使用与功能 双击 PDF 附件（要用 zotero 打开 PDF）。点击右上角展开翻译窗口。鼠标选中文字自动翻译。 image 4.6.2 翻译引擎配置 建议使用腾讯云 api，免费额度量大管饱，翻译效果也很好。或者小牛、有道智云，这两虽然免费额度是有期限的，但是可以建立自己的术语表，翻译起来更准确。 【注】小牛翻译注册后需要在首页手动领取100万免费流量，有效期一年 小牛翻译 ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:6","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.7 Crush Reference Github仓库 论文右侧——参考文献——点击“刷新”，自动拉取参考文献目录。 image.png ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:7","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"4.8 移动端 ：多平台同步阅读环境配置 具体操作与 #2.2 同步 设置相同 iPadOS：【Papership【绑定 Zotero 账号+WebDav 可参考 青柠学术 - 详解【Zotero+PaperShip+坚果云】文献生态的同步机制！ Android：【Zoo for Zotero】绑定 Zotero 账号+WebDav 可参考 青柠学术 - Zoo for Zotero，安卓上阅读 Zotero 文献的利器！ ","date":"2023-11-10","objectID":"/posts/zotero-config/:4:8","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"5 工作流 ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:0","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"5.1 联动 obsidian 参考最新zotero与obsidian笔记联动教程（可代替citations和mdnotes） ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:1","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"5.2 工作流：以 Zotero 为中枢 还是参考 Eleven 的知乎专栏 image 检索 / 阅读 / 笔记 确定题目 / 开题报告 / 文献综述 下载论文——Zotero 抓取 可视化文献处理——Zotero 存储 bib，导出处理 多端同步阅读——移动端同步 Zotero 账号 存档 \u0026 归类——Zotero 文件夹分类以及 Tag 分类 文献笔记——与 Zotero 条目联结 写作 插入引文生成参考文献——Zotero 通过文字处理软件插件插入参考文献 调整格式——修改 Zotero 参考文献引用格式设置 回溯 用 Zotero 搭建自己的知识库 ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:2","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"5.3 下载论文 正着下：抓取 单篇——浏览器中打开一篇论文的详情页，左键点击右上角【插件】，出现【Full Text PDF】即为成功 image 批量——在知网搜索页面点击右上角【插件】，跳出【Zotero Item Selector】 image 反着下 识别：从文献到题录 英文文献会自动抓取元数据，若失败请点【重新抓取 PDF 的元数据】 image 检索：从题录到文献，利用【搜索引擎】进入知网下载文献 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:3","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"5.4 储存\u0026分类 5.4.1 新建分类 image 5.4.2 Tag 管理 添加 Tag image 给 Tag 添加颜色 image 检索 Tag：单击左下角【Tag 区】中的 Tag 5.4.3 高级检索 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:4","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"5.5 阅读 5.5.1 导出 PDF 批注 image 5.5.2 联结文献笔记 ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:5","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"5.6 写作 5.6.1 插入参考文献 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:6","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["科研"],"content":"5.7 分享 5.7.1 导出条目及附件 导出分类，然后选择【Zotero RDF】格式，勾选附件和笔记 image 5.7.2 团队协作 新建群组 image 三种类型的群组 image ","date":"2023-11-10","objectID":"/posts/zotero-config/:5:7","tags":["生产力","zotero"],"title":"文献管理软件 zotero 下载安装使用与配置分享","uri":"/posts/zotero-config/"},{"categories":["blog"],"content":"Fixit提供了admonition shortcode，支持 12 种样式，可以在页面中插入提示的横幅。","date":"2023-11-08","objectID":"/posts/fixit-admonition/","tags":["hugo","Fixit"],"title":"Fixit自带的admonition样式","uri":"/posts/fixit-admonition/"},{"categories":["blog"],"content":"1 admonition样式 Fixit提供了admonition shortcode，支持 12 种样式，可以在页面中插入提示的横幅。代码如下： {{\u003c admonition \u003e}} 一个 **注意** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition abstract \u003e}} 一个 **摘要** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition info \u003e}} 一个 **信息** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition tip \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition success \u003e}} 一个 **成功** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition question \u003e}} 一个 **问题** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition warning \u003e}} 一个 **警告** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition failure \u003e}} 一个 **失败** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition danger \u003e}} 一个 **危险** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition bug \u003e}} 一个 **Bug** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition example \u003e}} 一个 **示例** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition quote \u003e}} 一个 **引用** 横幅 {{\u003c /admonition \u003e}} ","date":"2023-11-08","objectID":"/posts/fixit-admonition/:1:0","tags":["hugo","Fixit"],"title":"Fixit自带的admonition样式","uri":"/posts/fixit-admonition/"},{"categories":["blog"],"content":"1.1 效果展示 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 ","date":"2023-11-08","objectID":"/posts/fixit-admonition/:1:1","tags":["hugo","Fixit"],"title":"Fixit自带的admonition样式","uri":"/posts/fixit-admonition/"},{"categories":["blog"],"content":"1.2 命名参数 admonition shortcode 有以下命名参数: type [可选] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip 一个 技巧 横幅 ","date":"2023-11-08","objectID":"/posts/fixit-admonition/:1:2","tags":["hugo","Fixit"],"title":"Fixit自带的admonition样式","uri":"/posts/fixit-admonition/"},{"categories":["技术"],"content":"通过热点共享网络，配置网关，让让局域网内的手机等设备也走本机代理","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"通过热点共享网络，配置网关，让让局域网内的手机等设备也走本机代理。 注意 准备清单 硬件：具备无线网卡的PC，且能正常使用WiFi；其他能无线上网的设备 软件：正确配置能翻出去的代理软件 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:0:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"1 写在前面 本教程里主要是通过热点实现局域网，因此获取本机的局域网IP有些麻烦。大多数网络是通过路由器/交换机组成局域网，如果你是这样的情况，就可以直接进入路由器后台界面，查看连接设备的局域网IP，并且可以跳过教程中的热点设置部分。 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:1:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"2 Windows端设置 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:2:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"2.1 代理软件设置 打开v2rayN，开启代理确认能翻出去。【设置】-【参数设置】，勾选允许来自局域网的连接 image 记录局域网http端口号。如下图，此时http端口号为10811 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:2:1","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"2.2 Windows防火墙设置 搜索防火墙，打开高级安全 Windows Defender 防火墙-入站规则-新建规则 防火墙新建规则 规则类型：端口（O） 协议和端口：TCP、特定本地端口填代理软件的局域网http端口号10811 操作、配置文件：保持默认，直接点下一步即可 名称：随便填 最后点击完成结束新建规则 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:2:2","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"2.3 Windows热点设置(可根据写在前面选择跳过) 打开终端（或者cmd），输入ipconfig命令查看当前存在的Windows IP 配置。如下图，我这里共有6个网络连接配置，其中第一个以太网适配器 以太网是真正有网络连接的，记住它 image Windows【设置】-【网络和Internet】-【移动热点】，打开移动热点。可以关闭节能，防止热点长时间未使用被自动关闭 image 打开终端，再次输入ipconfig命令，可以看到无线局域网适配器 本地连接* 10有了连接，这就是刚刚打开的热点。记录这里的ipv4地址：192.168.137.1 image 打开控制面板-网络和Internet-网络连接 image 双击打开以太网适配器 以太网状态面板-属性-共享-勾选允许其他网络用户，家庭网络连接选择Windows热点对应的本地连接* 10 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:2:3","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"3 移动端设置 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:3:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"3.1 安卓端 打开WiFi，输入密码连接Windows热点 点击 →箭头 进入WiFi设置界面 代理改为手动 主机名改为热点对应的无线局域网适配器 本地连接* 10ipv4地址：192.168.137.1 端口改成代理软件的局域网http端口号10811 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:3:1","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"3.2 iOS端 打开WiFi，输入密码连接Windows热点 点击 ℹ️ 进入WiFi设置界面 点击 HTTP代理 配置代理 image 选择手动，服务器填写热点对应的本地连接* 10ipv4地址：192.168.137.1；端口改成代理软件的局域网http端口号10811 点击存储保存代理配置 image 打开Google验证是否成功代理。如下图，通过热点共享代理成功 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:3:2","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"3.3 其他移动设备同理设置WiFi代理即可 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:3:3","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"4 移动端作为热点共享本机代理 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:4:0","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"4.1 代理端设置 4.1.1 代理软件设置 以安卓端v2rayNG为例，在设置里勾选允许来自局域网的连接，记录HTTP代理端口为10809 image 4.1.2 代理机热点设置(可根据写在前面选择跳过) 移动端开启热点后，首先也是需要获得热点的ipv4地址。为了叙述方便，称开启热点的机器为代理机，连接热点的机器为连接机。获取代理机的ipv4地址一般有两种方法 连接机连接代理机的热点后，在WiFi详情界面查看服务器地址。该地址就是代理机的ipv4地址 代理机如果是安卓手机，可以下载MT管理器。点击左上角**≡**，打开终端模拟器。在开启热点前后，使用ifconfig命令查看多出来的ipv4地址。如下图，可以看到ipv4地址为192.168.70.209 苹果设备可以尝试使用iSH Shell等类似软件。 image ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:4:1","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"4.2 连接端设置 同理，连接端连接热点后，在WiFi设置里打开代理，设置为手动，地址、端口分别填写为192.168.70.209和10809 ","date":"2023-11-08","objectID":"/posts/sharing-proxy-to-lan-devices-using-hotpot/:4:2","tags":["计算机网络","VPN"],"title":"通过热点共享网络，让局域网内的手机等设备共享本机代理","uri":"/posts/sharing-proxy-to-lan-devices-using-hotpot/"},{"categories":["技术"],"content":"一些内网的主机可以访问公网，但是关闭了公网SSH端口。可以通过ZeroTier搭建VPC，让内网主机与client位于同一虚拟局域网中，实现SSH连接。","date":"2023-11-08","objectID":"/posts/zerotier-ssh/","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"一些内网的主机可以访问公网，但是关闭了公网SSH端口。可以通过ZeroTier搭建VPC，让内网主机与client位于同一虚拟局域网中，实现SSH连接。 zerotier官网：https://www.zerotier.com/ 官方文档：https://zerotier.atlassian.net/wiki/spaces/SD/overview ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:0:0","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"1 目的 假设存在网络拓扑如下图： image 内网中的主机A有公网访问权限，可以和PC通信。但是由于主机A没有公网IP或ssh等服务端口不向外网开放（主机A的服务端口只向内网机器开放），导致PC无法使用ssh等工具直接访问主机A。 我们要做的就是通过ZeroTier给PC、主机A创建一个overlay内网，忽略underlay，让PC、主机A以为双方都在同一个局域网内。这样PC就可以用ZeroTier内网IP来直接访问主机A了。 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:1:0","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"2 创建一个网络 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:2:0","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"2.1 创建网络 进入zerotier官网，用邮箱注册一个账号。然后进入网络列表，点击Create A Network按钮创建一个网络. image 下方列表中会出现一个网络ID，点击网络ID进入即可这个网络的设置界面。 image 记住这个网络ID，如图中为a09acf0233953bab ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:2:1","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"2.2 设置网络 setting image 设置网段 这里随便选一个，也可以保持默认。 如下图中，内网网段为172.22.0.0/16 image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:2:2","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"3 加入网络 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:3:0","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"3.1 安装ZeroTier软件 安卓平台建议使用：ZerotierFix 其他平台直接从官网下载 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:3:1","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"3.2 Windows 右键点击ZeroTier托盘图标——Join New Networdk——输入2.1中你获取的网络ID。本文中是a09acf0233953bab。点击Join加入网络。 image 回到网络设置网页，可以看到Members多了一个成员。 勾选权限，设置一个名字，便于区分。 image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:3:2","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"3.3 Linux——Ubuntu 3.3.1 安装 输入以下命令在ubuntu中安装zerotier： curl -s https://install.zerotier.com | sudo bash ## 设置开机自启 sudo systemctl enable zerotier-one ## 启动服务 sudo systemctl start zerotier-one 卸载命令： sudo dpkg -P zerotier-one sudo rm -rf /var/lib/zerotier-one/ 3.3.2 加入网络 运行以下命令并将\u003cNETWORK-ID\u003e替换为网络ID： sudo zerotier-cli join \u003cNETWORK-ID\u003e 本文中即为： sudo zerotier-cli join a09acf0233953bab 如果连接成功，应打印200 join OK输出。 同理，回到网络设置网页，可以看到Members多了一个成员。权限打勾，设置一个名字，便于区分。 记录下主机A的内网IP。本文中为172.22.0.214。 image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:3:3","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"4 远程连接 ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:4:0","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"4.1 确认网络权限 当你把所有设备都连接到网络中，记得将网络访问权限设置为Private，以增强安全性。 image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:4:1","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["技术"],"content":"4.2 远程连接 以Windows连接Ubuntu为例，双方都已启动ZeroTier并加入同一个网络。 直接ssh主机A的内网IP即可： image ","date":"2023-11-08","objectID":"/posts/zerotier-ssh/:4:2","tags":["生产力","VPC","SSH","计算机网络"],"title":"通过ZeroTier SSH连接内网主机","uri":"/posts/zerotier-ssh/"},{"categories":["blog"],"content":"使用 Hugo 和 Cloudflare Pages 配置博客，自定义域名并启用SSL，还可以白嫖Cloudflare的CDN。","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"使用 Hugo 和 Cloudflare Pages 配置博客，自定义域名并启用SSL，还可以白嫖Cloudflare的CDN。 更新于2023-12-14 经过测试，在开启自定义域名时，Cloudflare Pages 在国内的访问速度远慢于 Github Pages。因此建议还是使用 Github Pages。 使用hugo和Github Pages配置博客 https://www.haoyep.com/posts/windows-hugo-blog-github/ ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:0:0","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"1 前言 如果懒得使用 Github Pages 以及配置 Github Action，又想用自定义域名和 cdn 加速访问博客，那么 hugo + Cloudflare Pages 绝对是不二之选。 准备工作： 参考 Windows 下使用 hugo 和 Github Pages 配置博客，从头开始配置，一直到完成 创建 blog 仓库。 ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:1:0","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"2 设置 Cloudflare Pages ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:2:0","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"2.1 新建 Pages 登录 cloudflare，点击左侧的Workers和Pages，选择Pages——连接到 Git image.png 允许 cloudflare 访问 blog 仓库，选择这个仓库开始设置。 image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:2:1","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"2.2 设置构建环境 项目名称：随便写，之后会分配给你一个[项目名称].pages.dev。我这里就是 leev.pages.dev 生产分支：一般默认选择 main 框架预设：hugo 环境变量 设置 hugo 版本，设置成当前最新版本。我这里是：HUGO_VERSION=0.120.3 开启 hugo 扩展功能，extend=true image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:2:2","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"2.3 部署成功 通过[项目名称].pages.dev访问站点 image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:2:3","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"3 设置域名 ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:3:0","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"3.1 首先自行添加个人域名 image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:3:1","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"3.2 绑定域名 进入构建好的 Pages image.png 自定义域——设置自定义域 image.png 添加自定义域。可以设置一级或二级域名，这里我直接用了一级域名 image.png image.png 然后进入 Pages，绑定域名。 image 等待片刻，DNS 解析生效 image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:3:2","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"4 成果展示 现在可以直接通过自定义域名访问博客了，而且自动有 SSL。 例如现在就可以通过 https://www.haoyep.com/ 来访问Leehow的小站啦~ image.png ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:4:0","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"5 总结 以上整个环境部署好之后，接下来的常用命令就是以下几个： 站点目录下，新建文章，执行： hugo new posts/文章名.md 使用VScode编辑文章内容或修改，包括修改主题之类的。在本地进行调试: hugo serve -D 修改完成，确定要上传到 GitHub 上后，站点目录下执行： hugo 进行编译，没错误的话修改的内容就顺利同步到public下了，然后执行提交命令： git add . git commit -m \"随便写点提交信息\" git push 之后 Cloudflare 就会自动拉取、构建网站。 ","date":"2023-11-08","objectID":"/posts/windows-hugo-blog-cloudflare/:5:0","tags":["git","hugo","Cloudflare"],"title":"Windows 下使用 Hugo 和 Cloudflare Pages 配置博客","uri":"/posts/windows-hugo-blog-cloudflare/"},{"categories":["blog"],"content":"本文主要记录了如何引入 giscus 为博客添加评论功能。用户登陆Github账号后即可评论文章。","date":"2023-11-08","objectID":"/posts/hugo-add-component/","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["blog"],"content":"本文主要记录了如何引入 giscus 为博客添加评论功能。用户登陆Github账号后即可评论文章。 参考知乎 Hugo 的 LoveIt 主题添加 Giscus 评论：Giscus 是一个由 Github Discussions 驱动的评论系统，无需自己单独配置，直接白嫖 Github 的资源即可，而且 UI 和功能都十分地合适我，配合 LoveIt 的配置还可以做到十分美观。 ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:0:0","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["blog"],"content":"1 配置 Github 仓库 进入 Github Pages 仓库，找到Settings -\u003e General -\u003e Features -\u003e Discussions 勾选，为仓库启动 Discussions 功能 image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:1:0","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["blog"],"content":"2 安装 Giscus 点击这里，我们将会看到下面的界面，我们点击Install image.png 点击安装后，依次选择Only select repositories——Select repositories——选择 Github Pages 仓库。点击Install安装。 image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:2:0","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["blog"],"content":"3 配置 Giscus 接下来，我们只需到 Giscus 官网获取配置信息，然后将配置信息填到 Hugo 的配置文件中即可。但是由于主题的不同，所以配置文件的填写也不同，这里以 LoveIt 为例。 ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:3:0","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["blog"],"content":"3.1 来到 Giscus 官网 仓库：填写 Github Pages 仓库名 页面 ↔️ discussion 映射关系：Discussion 的标题包含页面的 pathname Discussion 分类：Announcements image.png 其他选项默认。往下滑，找到配置文件。记下data-repo，data-repo-id，data-category，data-category-id，data-mapping这几个值。 image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:3:1","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["blog"],"content":"3.2 修改 Hugo 配置 使用 vscode 打开 blog 仓库的本地项目文件夹，修改hugo.toml。在[params]——[params.page]处添加评论功能： [params.page.comment] enable = true # giscus comment 评论系统设置 (https://giscus.app/zh-CN) [params.page.comment.giscus] # 你可以参考官方文档来使用下列配置 enable = true repo = \"leegical/leegical.github.io\" repoId = \"R_kxxxx\" category = \"Announcements\" categoryId = \"DIC_kxxxx\" # 为空时自动适配当前主题 i18n 配置 lang = \"\" mapping = \"pathname\" reactionsEnabled = \"1\" emitMetadata = \"0\" inputPosition = \"bottom\" lazyLoading = false lightTheme = \"light\" darkTheme = \"dark\" image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:3:2","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":["blog"],"content":"3.3 提交更改 git add . git commit -m \"add comment func\" git push 稍等片刻，Github Action 会自动更改。 用户登录 Github 后即可评论，效果图如下： image.png ","date":"2023-11-08","objectID":"/posts/hugo-add-component/:3:3","tags":["git","hugo"],"title":"Hugo 博客添加 Giscus 评论功能","uri":"/posts/hugo-add-component/"},{"categories":null,"content":"Leehow's friends","date":"2023-09-19","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"  Subscribe ours https://www.haoyep.com/friends/opml.xml ","date":"2023-09-19","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"基本信息 - nickname: Leehow的小站 avatar: https://www.haoyep.com/avatar.jpg url: https://www.haoyep.com description: Leehow的个人博客，好耶！ ","date":"2023-09-19","objectID":"/friends/:1:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"友情提醒 Notice 互换友链请按以上格式在评论留言。（仅限个人非商业网站）  网站失效、停止维护、内容不当都可能被取消link！ 那些不尊重他人劳动成果，转载不加出处的，或恶意行为的网站，还请你不要来进行交换了。 ","date":"2023-09-19","objectID":"/friends/:2:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"互联网的广大朋友们，欢迎光临我的小博客！欢迎留言！","date":"2021-09-13","objectID":"/guestbook/","tags":null,"title":"留言","uri":"/guestbook/"},{"categories":null,"content":" Welcome 互联网的广大朋友们，欢迎光临我的小博客！欢迎留言！ ","date":"2021-09-13","objectID":"/guestbook/:0:0","tags":null,"title":"留言","uri":"/guestbook/"}]